// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xd1399dfcfea72681

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xd1399dfcfea72681, s.Struct)
	return str
}

func (s Batch) Msgs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xd1399dfcfea72681, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type CommonMix struct{ Client capnp.Client }

// CommonMix_TypeID is the unique identifier for the type CommonMix.
const CommonMix_TypeID = 0x87cda431a902c775

func (c CommonMix) AddBatch(ctx context.Context, params func(CommonMix_addBatch_Params) error, opts ...capnp.CallOption) CommonMix_addBatch_Results_Promise {
	if c.Client == nil {
		return CommonMix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x87cda431a902c775,
			MethodID:      0,
			InterfaceName: "rpc/common.capnp:CommonMix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(CommonMix_addBatch_Params{Struct: s}) }
	}
	return CommonMix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type CommonMix_Server interface {
	AddBatch(CommonMix_addBatch) error
}

func CommonMix_ServerToClient(s CommonMix_Server) CommonMix {
	c, _ := s.(server.Closer)
	return CommonMix{Client: server.New(CommonMix_Methods(nil, s), c)}
}

func CommonMix_Methods(methods []server.Method, s CommonMix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cda431a902c775,
			MethodID:      0,
			InterfaceName: "rpc/common.capnp:CommonMix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := CommonMix_addBatch{c, opts, CommonMix_addBatch_Params{Struct: p}, CommonMix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// CommonMix_addBatch holds the arguments for a server call to CommonMix.addBatch.
type CommonMix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  CommonMix_addBatch_Params
	Results CommonMix_addBatch_Results
}

type CommonMix_addBatch_Params struct{ capnp.Struct }

// CommonMix_addBatch_Params_TypeID is the unique identifier for the type CommonMix_addBatch_Params.
const CommonMix_addBatch_Params_TypeID = 0xaedf79fe4d5600a4

func NewCommonMix_addBatch_Params(s *capnp.Segment) (CommonMix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CommonMix_addBatch_Params{st}, err
}

func NewRootCommonMix_addBatch_Params(s *capnp.Segment) (CommonMix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CommonMix_addBatch_Params{st}, err
}

func ReadRootCommonMix_addBatch_Params(msg *capnp.Message) (CommonMix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return CommonMix_addBatch_Params{root.Struct()}, err
}

func (s CommonMix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xaedf79fe4d5600a4, s.Struct)
	return str
}

func (s CommonMix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s CommonMix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CommonMix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s CommonMix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CommonMix_addBatch_Params_List is a list of CommonMix_addBatch_Params.
type CommonMix_addBatch_Params_List struct{ capnp.List }

// NewCommonMix_addBatch_Params creates a new list of CommonMix_addBatch_Params.
func NewCommonMix_addBatch_Params_List(s *capnp.Segment, sz int32) (CommonMix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CommonMix_addBatch_Params_List{l}, err
}

func (s CommonMix_addBatch_Params_List) At(i int) CommonMix_addBatch_Params {
	return CommonMix_addBatch_Params{s.List.Struct(i)}
}

func (s CommonMix_addBatch_Params_List) Set(i int, v CommonMix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CommonMix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xaedf79fe4d5600a4, s.List)
	return str
}

// CommonMix_addBatch_Params_Promise is a wrapper for a CommonMix_addBatch_Params promised by a client call.
type CommonMix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p CommonMix_addBatch_Params_Promise) Struct() (CommonMix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return CommonMix_addBatch_Params{s}, err
}

func (p CommonMix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type CommonMix_addBatch_Results struct{ capnp.Struct }

// CommonMix_addBatch_Results_TypeID is the unique identifier for the type CommonMix_addBatch_Results.
const CommonMix_addBatch_Results_TypeID = 0xca5c975b5e86eec2

func NewCommonMix_addBatch_Results(s *capnp.Segment) (CommonMix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CommonMix_addBatch_Results{st}, err
}

func NewRootCommonMix_addBatch_Results(s *capnp.Segment) (CommonMix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CommonMix_addBatch_Results{st}, err
}

func ReadRootCommonMix_addBatch_Results(msg *capnp.Message) (CommonMix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return CommonMix_addBatch_Results{root.Struct()}, err
}

func (s CommonMix_addBatch_Results) String() string {
	str, _ := text.Marshal(0xca5c975b5e86eec2, s.Struct)
	return str
}

func (s CommonMix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s CommonMix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// CommonMix_addBatch_Results_List is a list of CommonMix_addBatch_Results.
type CommonMix_addBatch_Results_List struct{ capnp.List }

// NewCommonMix_addBatch_Results creates a new list of CommonMix_addBatch_Results.
func NewCommonMix_addBatch_Results_List(s *capnp.Segment, sz int32) (CommonMix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return CommonMix_addBatch_Results_List{l}, err
}

func (s CommonMix_addBatch_Results_List) At(i int) CommonMix_addBatch_Results {
	return CommonMix_addBatch_Results{s.List.Struct(i)}
}

func (s CommonMix_addBatch_Results_List) Set(i int, v CommonMix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CommonMix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0xca5c975b5e86eec2, s.List)
	return str
}

// CommonMix_addBatch_Results_Promise is a wrapper for a CommonMix_addBatch_Results promised by a client call.
type CommonMix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p CommonMix_addBatch_Results_Promise) Struct() (CommonMix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return CommonMix_addBatch_Results{s}, err
}

const schema_f30bb9d3ef541f29 = "x\xda\x8c\xcf\xbfJ\xfbP\x18\xc6\xf1\xe7='i~" +
	"\x7f\xa8\xf6\x10\xb7\"E\xa8\x82\x0e\xd5\xead\x97\x14\x1d" +
	"\x04\xa1\x90\x888\xa8\x08i*Z0MiR\xa8\xa3" +
	"\x83\xf6\x12\x9c\xdc\x0a\xd2Epp\xd0Q\x10Ap(" +
	"n\x82x\x07\x8a\xb8\xdaFRm\xa3Nn\xcf\xf0\xe5" +
	"s\xce;\xf5\x8f\xb2,-\xd7e\xc0\xc8\xca\x11\xbfz" +
	"\xcd\x9a\xe9\xc6m\x1dBp\x7f<\xb1\xfc|w\xfe\xff" +
	"\x15 \xb5\xc9\xee\xd53\xa6\x00\xea)[P\x1f\x82\xd5" +
	"n\xac\xe4:\xbb\x8f'\"N\x80L\x0a0s\xc5V" +
	"\x09\xa4\xb6\x98\x06\xf2/\x9f\x0e6\xd6\x0e\xd7o`\xc4" +
	"\x89\x00)\x08^X>\x08\xda\xdd`o\xec\xb8\xf3v" +
	"4\xdb\x82\x10\x14>\xd6\x95\xd4a~\xa1\x8e\xf2`\x8d" +
	"p\x0d\xfb~\xa5lMZ\x8em3\xa7\x94\xb2\xccr" +
	"\xa9\x9c\x99wl\xdb)\xe5x\xb1\xa6\x13\x19\x12\x97\xc3" +
	"\x1f\x85O\x0b\xb1\x08&\xfe*\xbeY(\xcc\x99\x9e\xb5" +
	"\x0d K:Q\x1f\x94~\x82\xc5Z\xaa\x17'u\xb3" +
	"br\xdb5$.\x01\x12\x01\":\x0d\x18\x7f8\x19" +
	"C\x8c\x12\xf9 \xa2Xx\x08\x88b\xf8\xa5\xbd\xb4\xe9" +
	"V\x95\x1d\xef\x1b\x9e\x09q\xcd\xf5L\xaf\xeaR\x04\x8c" +
	"\"_L\xea\x99Z\xa6\xeb|\x1c\xdf\x17&>\x85$" +
	"\xa3A\xdb\xddri\x00\xa4s\xa2(X0\xdf\x03\x00" +
	"\x00\xff\xffm\x8b\x88\xda"

func init() {
	schemas.Register(schema_f30bb9d3ef541f29,
		0x87cda431a902c775,
		0xaedf79fe4d5600a4,
		0xca5c975b5e86eec2,
		0xd1399dfcfea72681)
}
