// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type ConvoExitMsg struct{ capnp.Struct }

// ConvoExitMsg_TypeID is the unique identifier for the type ConvoExitMsg.
const ConvoExitMsg_TypeID = 0xf45944c62d9e640d

func NewConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func NewRootConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func ReadRootConvoExitMsg(msg *capnp.Message) (ConvoExitMsg, error) {
	root, err := msg.RootPtr()
	return ConvoExitMsg{root.Struct()}, err
}

func (s ConvoExitMsg) String() string {
	str, _ := text.Marshal(0xf45944c62d9e640d, s.Struct)
	return str
}

func (s ConvoExitMsg) ClientAddr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConvoExitMsg) HasClientAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) ClientAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConvoExitMsg) SetClientAddr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConvoExitMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoExitMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoExitMsg_List is a list of ConvoExitMsg.
type ConvoExitMsg_List struct{ capnp.List }

// NewConvoExitMsg creates a new list of ConvoExitMsg.
func NewConvoExitMsg_List(s *capnp.Segment, sz int32) (ConvoExitMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoExitMsg_List{l}, err
}

func (s ConvoExitMsg_List) At(i int) ConvoExitMsg { return ConvoExitMsg{s.List.Struct(i)} }

func (s ConvoExitMsg_List) Set(i int, v ConvoExitMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoExitMsg_List) String() string {
	str, _ := text.MarshalList(0xf45944c62d9e640d, s.List)
	return str
}

// ConvoExitMsg_Promise is a wrapper for a ConvoExitMsg promised by a client call.
type ConvoExitMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoExitMsg_Promise) Struct() (ConvoExitMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoExitMsg{s}, err
}

type ConvoMixMsg struct{ capnp.Struct }

// ConvoMixMsg_TypeID is the unique identifier for the type ConvoMixMsg.
const ConvoMixMsg_TypeID = 0xdad8c5d8def4618e

func NewConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConvoMixMsg{st}, err
}

func NewRootConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConvoMixMsg{st}, err
}

func ReadRootConvoMixMsg(msg *capnp.Message) (ConvoMixMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMixMsg{root.Struct()}, err
}

func (s ConvoMixMsg) String() string {
	str, _ := text.Marshal(0xdad8c5d8def4618e, s.Struct)
	return str
}

func (s ConvoMixMsg) PubKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasPubKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetPubKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMixMsg) Nonce() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasNonce() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetNonce(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s ConvoMixMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasContent() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetContent(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ConvoMixMsg_List is a list of ConvoMixMsg.
type ConvoMixMsg_List struct{ capnp.List }

// NewConvoMixMsg creates a new list of ConvoMixMsg.
func NewConvoMixMsg_List(s *capnp.Segment, sz int32) (ConvoMixMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ConvoMixMsg_List{l}, err
}

func (s ConvoMixMsg_List) At(i int) ConvoMixMsg { return ConvoMixMsg{s.List.Struct(i)} }

func (s ConvoMixMsg_List) Set(i int, v ConvoMixMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMixMsg_List) String() string {
	str, _ := text.MarshalList(0xdad8c5d8def4618e, s.List)
	return str
}

// ConvoMixMsg_Promise is a wrapper for a ConvoMixMsg promised by a client call.
type ConvoMixMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMixMsg_Promise) Struct() (ConvoMixMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMixMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) AddConvoMsg(ctx context.Context, params func(Mix_addConvoMsg_Params) error, opts ...capnp.CallOption) Mix_addConvoMsg_Results_Promise {
	if c.Client == nil {
		return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addConvoMsg_Params{Struct: s}) }
	}
	return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	AddConvoMsg(Mix_addConvoMsg) error

	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addConvoMsg{c, opts, Mix_addConvoMsg_Params{Struct: p}, Mix_addConvoMsg_Results{Struct: r}}
			return s.AddConvoMsg(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_addConvoMsg holds the arguments for a server call to Mix.addConvoMsg.
type Mix_addConvoMsg struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addConvoMsg_Params
	Results Mix_addConvoMsg_Results
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_addConvoMsg_Params struct{ capnp.Struct }

// Mix_addConvoMsg_Params_TypeID is the unique identifier for the type Mix_addConvoMsg_Params.
const Mix_addConvoMsg_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func NewRootMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func ReadRootMix_addConvoMsg_Params(msg *capnp.Message) (Mix_addConvoMsg_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Params{root.Struct()}, err
}

func (s Mix_addConvoMsg_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Params) Msg() (ConvoMixMsg, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMixMsg{Struct: p.Struct()}, err
}

func (s Mix_addConvoMsg_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addConvoMsg_Params) SetMsg(v ConvoMixMsg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ConvoMixMsg struct, preferring placement in s's segment.
func (s Mix_addConvoMsg_Params) NewMsg() (ConvoMixMsg, error) {
	ss, err := NewConvoMixMsg(s.Struct.Segment())
	if err != nil {
		return ConvoMixMsg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addConvoMsg_Params_List is a list of Mix_addConvoMsg_Params.
type Mix_addConvoMsg_Params_List struct{ capnp.List }

// NewMix_addConvoMsg_Params creates a new list of Mix_addConvoMsg_Params.
func NewMix_addConvoMsg_Params_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addConvoMsg_Params_List{l}, err
}

func (s Mix_addConvoMsg_Params_List) At(i int) Mix_addConvoMsg_Params {
	return Mix_addConvoMsg_Params{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Params_List) Set(i int, v Mix_addConvoMsg_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_addConvoMsg_Params_Promise is a wrapper for a Mix_addConvoMsg_Params promised by a client call.
type Mix_addConvoMsg_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Params_Promise) Struct() (Mix_addConvoMsg_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Params{s}, err
}

func (p Mix_addConvoMsg_Params_Promise) Msg() ConvoMixMsg_Promise {
	return ConvoMixMsg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Results struct{ capnp.Struct }

// Mix_addConvoMsg_Results_TypeID is the unique identifier for the type Mix_addConvoMsg_Results.
const Mix_addConvoMsg_Results_TypeID = 0x926c1f797f824577

func NewMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func NewRootMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func ReadRootMix_addConvoMsg_Results(msg *capnp.Message) (Mix_addConvoMsg_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Results{root.Struct()}, err
}

func (s Mix_addConvoMsg_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addConvoMsg_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addConvoMsg_Results_List is a list of Mix_addConvoMsg_Results.
type Mix_addConvoMsg_Results_List struct{ capnp.List }

// NewMix_addConvoMsg_Results creates a new list of Mix_addConvoMsg_Results.
func NewMix_addConvoMsg_Results_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addConvoMsg_Results_List{l}, err
}

func (s Mix_addConvoMsg_Results_List) At(i int) Mix_addConvoMsg_Results {
	return Mix_addConvoMsg_Results{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Results_List) Set(i int, v Mix_addConvoMsg_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_addConvoMsg_Results_Promise is a wrapper for a Mix_addConvoMsg_Results promised by a client call.
type Mix_addConvoMsg_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Results_Promise) Struct() (Mix_addConvoMsg_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Results{s}, err
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xf080ef04be3b5ceb

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xf080ef04be3b5ceb, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xf080ef04be3b5ceb, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0xb6ccb7cd5c0fca73

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0xb6ccb7cd5c0fca73, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0xb6ccb7cd5c0fca73, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x94\x93\xc1k\x13M\x18\xc6\xdfgf\xd3\xf4\xd0" +
	"\xb4\xd9n\xbfK\xe1#|\x1f\x05m\xb1\xb5\xad\x1e\xa4" +
	"\x05\x1bk\x03\xb6\xba\xb0\x13\xbc(\xbdl7!\x0d$" +
	"\x9b\x90\xd9\xd8\xf4 \x15A\xc4\x8b\xd4\xfe\x01\x85\x0a\xc5" +
	"\x83\x16)\x88\"R\x0f\x82\x1eD/\x9eJ\x05o\xe2" +
	"\xc1\x83\x82\x15\xd1\xcb\xcal\xdc&\x8d\xa8x{\x07\x9e" +
	"\xf9=\xef\xfb\xcc;\xc3\xf3H\xb2\x91\xc8\x01\x8dH\x0c" +
	"G\xda\xfc\x85\xd4\xe5\xa5\xc5Da\x85D7@\xa4E" +
	"\x89\x8e|\xc5(\x08\x06\xd8\x04\xc1\x7f=\xa3\xdd\xfbr" +
	"\xfb\xd3:\xe9\xdd \x8a@\x09\xfec\x03J\xd0\x1f\x08" +
	"6\x96\x8f\xbfsW?\xdf\"\xbd\x13\xfe\xb7\xde\xb4\xbe" +
	"\x9c\xb8\xb3V\x17\x1a\xd3\xec\xa6!\x98\xaa\xcc@+\x9f" +
	"w\xcd\xbe|\xf0\xe2~\xb3\xdbE\xd6\xab`W\x02\xc1" +
	"u{\xf7\xcd\xf6\xd3\xed\x9d\x16\x18W\x88u\xf6\xca\xd8" +
	"\x0c`\x1b\xec.\xc1\xb7\xd2[\xe3\xf1GO\xde\x92\xde" +
	"\xc9\x1bZ\x82\x91\xe2+\x86\x19\\\x99\xe6W\x8d5U" +
	"\xf9\xefg\xc7\x1fk\x1f.}l\x1e\xe3\x1a\xefV\xce" +
	"7\xb8r\x8eeV\x07\x9fM\x9d\xdbmq\x0e\xfc6" +
	"\xf9\x8e\xb1\x15\x00\x1f\xf2\x05\x1a\xf4+e\xe7p1_" +
	"\x1b\xe2\x8e]v\xcbcf\xbe6dg2'K\xee" +
	"\x85\x92)s}\xe9lBV\x0b\x9e\x14\x1a\xd7\x884" +
	"\x10\xe9\xb11\"\xd1\xce!z\x18&\xa4g{U\x89" +
	"6bh#\xfc\x89f\xd9]\x15\xbb\xb8\x0f\xf6\x7f\x03" +
	"\x16-\xca\x1c\xe2\x8d\xdc\x08\x8871QgN\xdaQ" +
	"\xcf\x99\xb7\x80f\xca\xc0\x0fJ\x1fCWQ\xe6$:" +
	"\x09\x16\x07b\xc4T\xf9\x8b\xbe&m\xcf\x99\xefKg" +
	"e\xb5\xc0\xffzDVG\xd5g\xcb\xd7L\x89\x9cj" +
	"\xaac\x0f\x92R\x90$\x878\xc3\xa0\x03=jK\xf4" +
	"\xe9Q\"1\xc5!,\x06\x9d\xb1\x1e0\"\xdd\x9c$" +
	"\x12\xa78\xc4Y\x86\x89ru\xeetv1\xe8<F" +
	"H\xb8%\xd7\xc9\x86\xa7%\xa7\xe4zY\xd7\x0b\xcf\xad" +
	"\xd9\x98y\xd4T\x13\xed<B\xb4\xb7\xee\x08?\x86>" +
	"2GL\xef\x8f\x02{;\x84p\x8d\xf5\x7fg\x88\xe9" +
	"\xffD\xfd\xf0\xbd(j\xca\\\x12~\x98\x13\x11%a" +
	"\xe1\xf7YZv\xc5.b_\x94\xa3\x8d(\x13sJ" +
	"\x84x\xe3\x9f\xb5<qs\xa6\xa9Z\xde3\xb9\xcc\xd5" +
	"\xe7\x09q\xfd\xe7\x89\xc4A\x0eq\xb4)\xd4\x11\x95\xdf" +
	"!\x0eq\x8c\xc1w\x0a\xf9\xac\xeb\x9d\xc8\x10\xcfT\xd0" +
	"A\x0c\x1d?\xe7\xf6=\x00\x00\xff\xff\\P\x0fu"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x926c1f797f824577,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xb6ccb7cd5c0fca73,
		0xdad8c5d8def4618e,
		0xe5c2bb103bbd5250,
		0xf080ef04be3b5ceb,
		0xf45944c62d9e640d)
}
