// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type ConvoExitMsg struct{ capnp.Struct }

// ConvoExitMsg_TypeID is the unique identifier for the type ConvoExitMsg.
const ConvoExitMsg_TypeID = 0xf45944c62d9e640d

func NewConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func NewRootConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func ReadRootConvoExitMsg(msg *capnp.Message) (ConvoExitMsg, error) {
	root, err := msg.RootPtr()
	return ConvoExitMsg{root.Struct()}, err
}

func (s ConvoExitMsg) String() string {
	str, _ := text.Marshal(0xf45944c62d9e640d, s.Struct)
	return str
}

func (s ConvoExitMsg) ClientAddr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConvoExitMsg) HasClientAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) ClientAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConvoExitMsg) SetClientAddr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConvoExitMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoExitMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoExitMsg_List is a list of ConvoExitMsg.
type ConvoExitMsg_List struct{ capnp.List }

// NewConvoExitMsg creates a new list of ConvoExitMsg.
func NewConvoExitMsg_List(s *capnp.Segment, sz int32) (ConvoExitMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoExitMsg_List{l}, err
}

func (s ConvoExitMsg_List) At(i int) ConvoExitMsg { return ConvoExitMsg{s.List.Struct(i)} }

func (s ConvoExitMsg_List) Set(i int, v ConvoExitMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoExitMsg_List) String() string {
	str, _ := text.MarshalList(0xf45944c62d9e640d, s.List)
	return str
}

// ConvoExitMsg_Promise is a wrapper for a ConvoExitMsg promised by a client call.
type ConvoExitMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoExitMsg_Promise) Struct() (ConvoExitMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoExitMsg{s}, err
}

type ConvoMixMsg struct{ capnp.Struct }

// ConvoMixMsg_TypeID is the unique identifier for the type ConvoMixMsg.
const ConvoMixMsg_TypeID = 0xdad8c5d8def4618e

func NewConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConvoMixMsg{st}, err
}

func NewRootConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConvoMixMsg{st}, err
}

func ReadRootConvoMixMsg(msg *capnp.Message) (ConvoMixMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMixMsg{root.Struct()}, err
}

func (s ConvoMixMsg) String() string {
	str, _ := text.Marshal(0xdad8c5d8def4618e, s.Struct)
	return str
}

func (s ConvoMixMsg) PubKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasPubKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetPubKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMixMsg) Nonce() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasNonce() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetNonce(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s ConvoMixMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasContent() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetContent(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ConvoMixMsg_List is a list of ConvoMixMsg.
type ConvoMixMsg_List struct{ capnp.List }

// NewConvoMixMsg creates a new list of ConvoMixMsg.
func NewConvoMixMsg_List(s *capnp.Segment, sz int32) (ConvoMixMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ConvoMixMsg_List{l}, err
}

func (s ConvoMixMsg_List) At(i int) ConvoMixMsg { return ConvoMixMsg{s.List.Struct(i)} }

func (s ConvoMixMsg_List) Set(i int, v ConvoMixMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMixMsg_List) String() string {
	str, _ := text.MarshalList(0xdad8c5d8def4618e, s.List)
	return str
}

// ConvoMixMsg_Promise is a wrapper for a ConvoMixMsg promised by a client call.
type ConvoMixMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMixMsg_Promise) Struct() (ConvoMixMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMixMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (ConvoMixMsg_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMixMsg_List{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v ConvoMixMsg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated ConvoMixMsg_List, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (ConvoMixMsg_List, error) {
	l, err := NewConvoMixMsg_List(s.Struct.Segment(), n)
	if err != nil {
		return ConvoMixMsg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) AddConvoMsg(ctx context.Context, params func(Mix_addConvoMsg_Params) error, opts ...capnp.CallOption) Mix_addConvoMsg_Results_Promise {
	if c.Client == nil {
		return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addConvoMsg_Params{Struct: s}) }
	}
	return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	AddConvoMsg(Mix_addConvoMsg) error

	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addConvoMsg{c, opts, Mix_addConvoMsg_Params{Struct: p}, Mix_addConvoMsg_Results{Struct: r}}
			return s.AddConvoMsg(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_addConvoMsg holds the arguments for a server call to Mix.addConvoMsg.
type Mix_addConvoMsg struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addConvoMsg_Params
	Results Mix_addConvoMsg_Results
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_addConvoMsg_Params struct{ capnp.Struct }

// Mix_addConvoMsg_Params_TypeID is the unique identifier for the type Mix_addConvoMsg_Params.
const Mix_addConvoMsg_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func NewRootMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func ReadRootMix_addConvoMsg_Params(msg *capnp.Message) (Mix_addConvoMsg_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Params{root.Struct()}, err
}

func (s Mix_addConvoMsg_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Params) Msg() (ConvoMixMsg, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMixMsg{Struct: p.Struct()}, err
}

func (s Mix_addConvoMsg_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addConvoMsg_Params) SetMsg(v ConvoMixMsg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ConvoMixMsg struct, preferring placement in s's segment.
func (s Mix_addConvoMsg_Params) NewMsg() (ConvoMixMsg, error) {
	ss, err := NewConvoMixMsg(s.Struct.Segment())
	if err != nil {
		return ConvoMixMsg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addConvoMsg_Params_List is a list of Mix_addConvoMsg_Params.
type Mix_addConvoMsg_Params_List struct{ capnp.List }

// NewMix_addConvoMsg_Params creates a new list of Mix_addConvoMsg_Params.
func NewMix_addConvoMsg_Params_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addConvoMsg_Params_List{l}, err
}

func (s Mix_addConvoMsg_Params_List) At(i int) Mix_addConvoMsg_Params {
	return Mix_addConvoMsg_Params{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Params_List) Set(i int, v Mix_addConvoMsg_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_addConvoMsg_Params_Promise is a wrapper for a Mix_addConvoMsg_Params promised by a client call.
type Mix_addConvoMsg_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Params_Promise) Struct() (Mix_addConvoMsg_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Params{s}, err
}

func (p Mix_addConvoMsg_Params_Promise) Msg() ConvoMixMsg_Promise {
	return ConvoMixMsg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Results struct{ capnp.Struct }

// Mix_addConvoMsg_Results_TypeID is the unique identifier for the type Mix_addConvoMsg_Results.
const Mix_addConvoMsg_Results_TypeID = 0x926c1f797f824577

func NewMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func NewRootMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func ReadRootMix_addConvoMsg_Results(msg *capnp.Message) (Mix_addConvoMsg_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Results{root.Struct()}, err
}

func (s Mix_addConvoMsg_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addConvoMsg_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addConvoMsg_Results_List is a list of Mix_addConvoMsg_Results.
type Mix_addConvoMsg_Results_List struct{ capnp.List }

// NewMix_addConvoMsg_Results creates a new list of Mix_addConvoMsg_Results.
func NewMix_addConvoMsg_Results_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addConvoMsg_Results_List{l}, err
}

func (s Mix_addConvoMsg_Results_List) At(i int) Mix_addConvoMsg_Results {
	return Mix_addConvoMsg_Results{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Results_List) Set(i int, v Mix_addConvoMsg_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_addConvoMsg_Results_Promise is a wrapper for a Mix_addConvoMsg_Results promised by a client call.
type Mix_addConvoMsg_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Results_Promise) Struct() (Mix_addConvoMsg_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Results{s}, err
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xf080ef04be3b5ceb

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xf080ef04be3b5ceb, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xf080ef04be3b5ceb, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0xb6ccb7cd5c0fca73

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0xb6ccb7cd5c0fca73, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0xb6ccb7cd5c0fca73, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x94\x93\xc1k\x13A\x14\xc6\xdf7\x934=4" +
	"i\xb6[/\x05\x09JA[lm\xab\x07i\xc1\xc6" +
	"\xda\x80\xad.\xec\x04/J/\xdbMH\x03\xc9&d" +
	"66=HE\x10\xf1\"\xb5\x7f@\xa1B\xf1\xa0E" +
	"\x0a\xa2\x88\xd4\x83\xa0\x07\xd1\x8b\xa7R\xc1\x9bx\xf0\xa0" +
	"`E\xf4\xb22\x1b\xb7I#*\xdev\xe0\xdb\xdf{" +
	"\xef7o\x86\xe6\x90d\xc3\xe1C!\"1\x14n\xf3" +
	"\xe6SW\x17\x17\x12\x85e\x12]\x00Q(Bt\xec" +
	";F@\xd0\xc1\xc6\x09\xde\xdb\xe9\xd0\x83ow\xbf\xac" +
	"\x91\xd6\x05\xa20T\xe0\x00\xebW\x81>?\xb0\xbet" +
	"\xf2\x83\xb3\xf2\xf5\x0ei1x?z\xd2\xdaR\xe2\xde" +
	"j=\xa8O\xb1\xdb\xba`\xea\xcb\xf0\xb3\xf2e\xe7\xcc" +
	"\xebG\xaf\x1e6W\xbb\xccz\x14\xec\x9a\x1f\xb8i\xed" +
	"\xbc\xdbz\xbe\xb5\xdd\x02\xe3\x0a\xb1\xc6\xde\xe8\x1b>l" +
	"\x9d\xdd'xfzs,\xfe\xe4\xd9{\xd2b\xbc\x91" +
	"%\xe8)\xbe\xac\x1b\xfe/S\xfc\xba\xbe\xaa\xbe\xbc\x8f" +
	"3cOC\x9f\xae|n\x1e\xe3\x06\xefR\x95oq" +
	"U9\x9aY\x19x1ya\xa7\xa5\xb2_o\x83o" +
	"\xeb\x9b>\xf01\x9f\xa7\x01\xafR\xb6\x8f\x16\xf3\xb5A" +
	"n[e\xa7<j\xe4k\x83V&s\xba\xe4\\*" +
	"\x192\xd7\x9b\xce&d\xb5\xe0J\x11\xe2!\xa2\x10\x88" +
	"\xb4\xe8(\x91h\xe7\x10\xdd\x0c\xe3\xd2\xb5\xdc\xaaD\x1b" +
	"1\xb4\x11\xfeE3\xad\xce\x8aU\xdc\x03;\xd8\x80E" +
	"\x8a2\x87x\xc3\x1b\x01\xf1&&\xea\xcc\x09+\xe2\xda" +
	"s&\xd0L\xe9\xffE\xe9e\xe8,\xca\x9cD\x8c`" +
	"r\xb4\xd0b\x7f\xecp\xc2r\xed\xb9\xdetVV\x0b" +
	"\xfc\xbf\x87euT}\xca|\xcd\x90\xc8\xa9\xf6:v" +
	"!)\x05Ir\x88s\x0c\x1a\xd0\xad\xf6E\x9b\x1a!" +
	"\x12\x93\x1c\xc2d\xd0\x18\xeb\x06#\xd2\x8c\x09\"q\x86" +
	"C\x9cg\x18/Wg\xcff\x17\x10%\x86(!\xe1" +
	"\x94\x1c;\x1b\x9c\x16\xed\x92\xe3f\x1d78\xb7Z2" +
	"\xf2\xa8\xa9&\xday\x98hw\xf1\x11<\x11mx\x96" +
	"\x98\xd6\x17\x01v\xb7\x09\xc1Bk\xfb\xa7\x89i\xfb\"" +
	"^ps\x141d.\x09/\xf0DDI\x98\xf8\xbb" +
	"K\xd3\xaaXE\xecQ9\xd2P\x99\x98U!\xc4\x1b" +
	"/\xae\xe5\xb2\x9b\x9d\xa6jy\xd7\xe02W\x9f'\xc0" +
	"\xf5]$\x12\x879\xc4\xf1&\xa9\xc3\xca\xdf\x11\x0eq" +
	"\x82\xc1\xb3\x0b\xf9\xac\xe3\x9e\xca\x10\xcfT\xd0A\x0c\x1d" +
	"\xbf{\xfb\x19\x00\x00\xff\xff\xc6F\x16\x86"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x926c1f797f824577,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xb6ccb7cd5c0fca73,
		0xdad8c5d8def4618e,
		0xe5c2bb103bbd5250,
		0xf080ef04be3b5ceb,
		0xf45944c62d9e640d)
}
