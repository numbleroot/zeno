// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type MixnetConfig struct{ capnp.Struct }

// MixnetConfig_TypeID is the unique identifier for the type MixnetConfig.
const MixnetConfig_TypeID = 0x95896509ee825aa6

func NewMixnetConfig(s *capnp.Segment) (MixnetConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MixnetConfig{st}, err
}

func NewRootMixnetConfig(s *capnp.Segment) (MixnetConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MixnetConfig{st}, err
}

func ReadRootMixnetConfig(msg *capnp.Message) (MixnetConfig, error) {
	root, err := msg.RootPtr()
	return MixnetConfig{root.Struct()}, err
}

func (s MixnetConfig) String() string {
	str, _ := text.Marshal(0x95896509ee825aa6, s.Struct)
	return str
}

func (s MixnetConfig) SecondsToNextRound() uint16 {
	return s.Struct.Uint16(0)
}

func (s MixnetConfig) SetSecondsToNextRound(v uint16) {
	s.Struct.SetUint16(0, v)
}

// MixnetConfig_List is a list of MixnetConfig.
type MixnetConfig_List struct{ capnp.List }

// NewMixnetConfig creates a new list of MixnetConfig.
func NewMixnetConfig_List(s *capnp.Segment, sz int32) (MixnetConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MixnetConfig_List{l}, err
}

func (s MixnetConfig_List) At(i int) MixnetConfig { return MixnetConfig{s.List.Struct(i)} }

func (s MixnetConfig_List) Set(i int, v MixnetConfig) error { return s.List.SetStruct(i, v.Struct) }

func (s MixnetConfig_List) String() string {
	str, _ := text.MarshalList(0x95896509ee825aa6, s.List)
	return str
}

// MixnetConfig_Promise is a wrapper for a MixnetConfig promised by a client call.
type MixnetConfig_Promise struct{ *capnp.Pipeline }

func (p MixnetConfig_Promise) Struct() (MixnetConfig, error) {
	s, err := p.Pipeline.Struct()
	return MixnetConfig{s}, err
}

type ConvoExitMsg struct{ capnp.Struct }

// ConvoExitMsg_TypeID is the unique identifier for the type ConvoExitMsg.
const ConvoExitMsg_TypeID = 0xf45944c62d9e640d

func NewConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func NewRootConvoExitMsg(s *capnp.Segment) (ConvoExitMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoExitMsg{st}, err
}

func ReadRootConvoExitMsg(msg *capnp.Message) (ConvoExitMsg, error) {
	root, err := msg.RootPtr()
	return ConvoExitMsg{root.Struct()}, err
}

func (s ConvoExitMsg) String() string {
	str, _ := text.Marshal(0xf45944c62d9e640d, s.Struct)
	return str
}

func (s ConvoExitMsg) ClientAddr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConvoExitMsg) HasClientAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) ClientAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConvoExitMsg) SetClientAddr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ConvoExitMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoExitMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoExitMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoExitMsg_List is a list of ConvoExitMsg.
type ConvoExitMsg_List struct{ capnp.List }

// NewConvoExitMsg creates a new list of ConvoExitMsg.
func NewConvoExitMsg_List(s *capnp.Segment, sz int32) (ConvoExitMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoExitMsg_List{l}, err
}

func (s ConvoExitMsg_List) At(i int) ConvoExitMsg { return ConvoExitMsg{s.List.Struct(i)} }

func (s ConvoExitMsg_List) Set(i int, v ConvoExitMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoExitMsg_List) String() string {
	str, _ := text.MarshalList(0xf45944c62d9e640d, s.List)
	return str
}

// ConvoExitMsg_Promise is a wrapper for a ConvoExitMsg promised by a client call.
type ConvoExitMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoExitMsg_Promise) Struct() (ConvoExitMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoExitMsg{s}, err
}

type ConvoMixMsg struct{ capnp.Struct }

// ConvoMixMsg_TypeID is the unique identifier for the type ConvoMixMsg.
const ConvoMixMsg_TypeID = 0xdad8c5d8def4618e

func NewConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMixMsg{st}, err
}

func NewRootConvoMixMsg(s *capnp.Segment) (ConvoMixMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMixMsg{st}, err
}

func ReadRootConvoMixMsg(msg *capnp.Message) (ConvoMixMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMixMsg{root.Struct()}, err
}

func (s ConvoMixMsg) String() string {
	str, _ := text.Marshal(0xdad8c5d8def4618e, s.Struct)
	return str
}

func (s ConvoMixMsg) PubKey() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasPubKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetPubKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMixMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMixMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMixMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoMixMsg_List is a list of ConvoMixMsg.
type ConvoMixMsg_List struct{ capnp.List }

// NewConvoMixMsg creates a new list of ConvoMixMsg.
func NewConvoMixMsg_List(s *capnp.Segment, sz int32) (ConvoMixMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoMixMsg_List{l}, err
}

func (s ConvoMixMsg_List) At(i int) ConvoMixMsg { return ConvoMixMsg{s.List.Struct(i)} }

func (s ConvoMixMsg_List) Set(i int, v ConvoMixMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMixMsg_List) String() string {
	str, _ := text.MarshalList(0xdad8c5d8def4618e, s.List)
	return str
}

// ConvoMixMsg_Promise is a wrapper for a ConvoMixMsg promised by a client call.
type ConvoMixMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMixMsg_Promise) Struct() (ConvoMixMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMixMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) GetMixnetConfig(ctx context.Context, params func(Mix_getMixnetConfig_Params) error, opts ...capnp.CallOption) Mix_getMixnetConfig_Results_Promise {
	if c.Client == nil {
		return Mix_getMixnetConfig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "getMixnetConfig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_getMixnetConfig_Params{Struct: s}) }
	}
	return Mix_getMixnetConfig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddConvoMsg(ctx context.Context, params func(Mix_addConvoMsg_Params) error, opts ...capnp.CallOption) Mix_addConvoMsg_Results_Promise {
	if c.Client == nil {
		return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addConvoMsg_Params{Struct: s}) }
	}
	return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      2,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	GetMixnetConfig(Mix_getMixnetConfig) error

	AddConvoMsg(Mix_addConvoMsg) error

	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "getMixnetConfig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_getMixnetConfig{c, opts, Mix_getMixnetConfig_Params{Struct: p}, Mix_getMixnetConfig_Results{Struct: r}}
			return s.GetMixnetConfig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addConvoMsg{c, opts, Mix_addConvoMsg_Params{Struct: p}, Mix_addConvoMsg_Results{Struct: r}}
			return s.AddConvoMsg(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      2,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_getMixnetConfig holds the arguments for a server call to Mix.getMixnetConfig.
type Mix_getMixnetConfig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_getMixnetConfig_Params
	Results Mix_getMixnetConfig_Results
}

// Mix_addConvoMsg holds the arguments for a server call to Mix.addConvoMsg.
type Mix_addConvoMsg struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addConvoMsg_Params
	Results Mix_addConvoMsg_Results
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_getMixnetConfig_Params struct{ capnp.Struct }

// Mix_getMixnetConfig_Params_TypeID is the unique identifier for the type Mix_getMixnetConfig_Params.
const Mix_getMixnetConfig_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_getMixnetConfig_Params(s *capnp.Segment) (Mix_getMixnetConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Mix_getMixnetConfig_Params{st}, err
}

func NewRootMix_getMixnetConfig_Params(s *capnp.Segment) (Mix_getMixnetConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Mix_getMixnetConfig_Params{st}, err
}

func ReadRootMix_getMixnetConfig_Params(msg *capnp.Message) (Mix_getMixnetConfig_Params, error) {
	root, err := msg.RootPtr()
	return Mix_getMixnetConfig_Params{root.Struct()}, err
}

func (s Mix_getMixnetConfig_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

// Mix_getMixnetConfig_Params_List is a list of Mix_getMixnetConfig_Params.
type Mix_getMixnetConfig_Params_List struct{ capnp.List }

// NewMix_getMixnetConfig_Params creates a new list of Mix_getMixnetConfig_Params.
func NewMix_getMixnetConfig_Params_List(s *capnp.Segment, sz int32) (Mix_getMixnetConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Mix_getMixnetConfig_Params_List{l}, err
}

func (s Mix_getMixnetConfig_Params_List) At(i int) Mix_getMixnetConfig_Params {
	return Mix_getMixnetConfig_Params{s.List.Struct(i)}
}

func (s Mix_getMixnetConfig_Params_List) Set(i int, v Mix_getMixnetConfig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_getMixnetConfig_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_getMixnetConfig_Params_Promise is a wrapper for a Mix_getMixnetConfig_Params promised by a client call.
type Mix_getMixnetConfig_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_getMixnetConfig_Params_Promise) Struct() (Mix_getMixnetConfig_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_getMixnetConfig_Params{s}, err
}

type Mix_getMixnetConfig_Results struct{ capnp.Struct }

// Mix_getMixnetConfig_Results_TypeID is the unique identifier for the type Mix_getMixnetConfig_Results.
const Mix_getMixnetConfig_Results_TypeID = 0x926c1f797f824577

func NewMix_getMixnetConfig_Results(s *capnp.Segment) (Mix_getMixnetConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_getMixnetConfig_Results{st}, err
}

func NewRootMix_getMixnetConfig_Results(s *capnp.Segment) (Mix_getMixnetConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_getMixnetConfig_Results{st}, err
}

func ReadRootMix_getMixnetConfig_Results(msg *capnp.Message) (Mix_getMixnetConfig_Results, error) {
	root, err := msg.RootPtr()
	return Mix_getMixnetConfig_Results{root.Struct()}, err
}

func (s Mix_getMixnetConfig_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_getMixnetConfig_Results) Meta() (MixnetConfig, error) {
	p, err := s.Struct.Ptr(0)
	return MixnetConfig{Struct: p.Struct()}, err
}

func (s Mix_getMixnetConfig_Results) HasMeta() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_getMixnetConfig_Results) SetMeta(v MixnetConfig) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated MixnetConfig struct, preferring placement in s's segment.
func (s Mix_getMixnetConfig_Results) NewMeta() (MixnetConfig, error) {
	ss, err := NewMixnetConfig(s.Struct.Segment())
	if err != nil {
		return MixnetConfig{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_getMixnetConfig_Results_List is a list of Mix_getMixnetConfig_Results.
type Mix_getMixnetConfig_Results_List struct{ capnp.List }

// NewMix_getMixnetConfig_Results creates a new list of Mix_getMixnetConfig_Results.
func NewMix_getMixnetConfig_Results_List(s *capnp.Segment, sz int32) (Mix_getMixnetConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_getMixnetConfig_Results_List{l}, err
}

func (s Mix_getMixnetConfig_Results_List) At(i int) Mix_getMixnetConfig_Results {
	return Mix_getMixnetConfig_Results{s.List.Struct(i)}
}

func (s Mix_getMixnetConfig_Results_List) Set(i int, v Mix_getMixnetConfig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_getMixnetConfig_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_getMixnetConfig_Results_Promise is a wrapper for a Mix_getMixnetConfig_Results promised by a client call.
type Mix_getMixnetConfig_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_getMixnetConfig_Results_Promise) Struct() (Mix_getMixnetConfig_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_getMixnetConfig_Results{s}, err
}

func (p Mix_getMixnetConfig_Results_Promise) Meta() MixnetConfig_Promise {
	return MixnetConfig_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Params struct{ capnp.Struct }

// Mix_addConvoMsg_Params_TypeID is the unique identifier for the type Mix_addConvoMsg_Params.
const Mix_addConvoMsg_Params_TypeID = 0xf080ef04be3b5ceb

func NewMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func NewRootMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func ReadRootMix_addConvoMsg_Params(msg *capnp.Message) (Mix_addConvoMsg_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Params{root.Struct()}, err
}

func (s Mix_addConvoMsg_Params) String() string {
	str, _ := text.Marshal(0xf080ef04be3b5ceb, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Params) Msg() (ConvoMixMsg, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMixMsg{Struct: p.Struct()}, err
}

func (s Mix_addConvoMsg_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addConvoMsg_Params) SetMsg(v ConvoMixMsg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ConvoMixMsg struct, preferring placement in s's segment.
func (s Mix_addConvoMsg_Params) NewMsg() (ConvoMixMsg, error) {
	ss, err := NewConvoMixMsg(s.Struct.Segment())
	if err != nil {
		return ConvoMixMsg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addConvoMsg_Params_List is a list of Mix_addConvoMsg_Params.
type Mix_addConvoMsg_Params_List struct{ capnp.List }

// NewMix_addConvoMsg_Params creates a new list of Mix_addConvoMsg_Params.
func NewMix_addConvoMsg_Params_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addConvoMsg_Params_List{l}, err
}

func (s Mix_addConvoMsg_Params_List) At(i int) Mix_addConvoMsg_Params {
	return Mix_addConvoMsg_Params{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Params_List) Set(i int, v Mix_addConvoMsg_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Params_List) String() string {
	str, _ := text.MarshalList(0xf080ef04be3b5ceb, s.List)
	return str
}

// Mix_addConvoMsg_Params_Promise is a wrapper for a Mix_addConvoMsg_Params promised by a client call.
type Mix_addConvoMsg_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Params_Promise) Struct() (Mix_addConvoMsg_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Params{s}, err
}

func (p Mix_addConvoMsg_Params_Promise) Msg() ConvoMixMsg_Promise {
	return ConvoMixMsg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Results struct{ capnp.Struct }

// Mix_addConvoMsg_Results_TypeID is the unique identifier for the type Mix_addConvoMsg_Results.
const Mix_addConvoMsg_Results_TypeID = 0xb6ccb7cd5c0fca73

func NewMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func NewRootMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func ReadRootMix_addConvoMsg_Results(msg *capnp.Message) (Mix_addConvoMsg_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Results{root.Struct()}, err
}

func (s Mix_addConvoMsg_Results) String() string {
	str, _ := text.Marshal(0xb6ccb7cd5c0fca73, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addConvoMsg_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addConvoMsg_Results_List is a list of Mix_addConvoMsg_Results.
type Mix_addConvoMsg_Results_List struct{ capnp.List }

// NewMix_addConvoMsg_Results creates a new list of Mix_addConvoMsg_Results.
func NewMix_addConvoMsg_Results_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addConvoMsg_Results_List{l}, err
}

func (s Mix_addConvoMsg_Results_List) At(i int) Mix_addConvoMsg_Results {
	return Mix_addConvoMsg_Results{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Results_List) Set(i int, v Mix_addConvoMsg_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Results_List) String() string {
	str, _ := text.MarshalList(0xb6ccb7cd5c0fca73, s.List)
	return str
}

// Mix_addConvoMsg_Results_Promise is a wrapper for a Mix_addConvoMsg_Results promised by a client call.
type Mix_addConvoMsg_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Results_Promise) Struct() (Mix_addConvoMsg_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Results{s}, err
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xb8d4c1f6bef26505

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xb8d4c1f6bef26505, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xb8d4c1f6bef26505, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0x873cb130ee0d5c36

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0x873cb130ee0d5c36, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0x873cb130ee0d5c36, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x94\x94OHT[\x1c\xc7\x7f\xbfs\xeex}" +
	"\xe0\x8cs\xbd\xae\xe4\xc1\xe0\xc3\xc5S\x9e\x7f\xdf\x1f\x1e" +
	"\xea{\x9a\xe6B\xe3\xc6\xdc\xa1Mb\x8b\xeb\xccm\xbc" +
	"\xe0\xdc\x99<wrf!\x86\x10\xd1&Dh\xd3B" +
	"(\xb0\x16\xd5B\x88\x12\"\xa1\xa0\x82\xa8EQ\xa0\x86" +
	"\xed\xa2Ed\xff\xb4\xa0\xcd\x8ds\xc6\xb9w\x9c\xec\xdf" +
	"\xee\\\xf8\xf2\xfd~\xcf\xe7w\x7f\xa7m\x09{I{" +
	"\xa05\x00\xa0w\x07*\xdc\x7fF\x82\x1bm\x8b\xdd'" +
	"@\xafA\x04\x90d\x80?\xa7H\x1d\x02\xaa\xc7I\x0f" +
	"\xa0;903\x9d\x8f\x8c\xcf\x81R\x83\x00\x01\xe4\x82" +
	"\x05\x12\xe3\x82E!8?<\xb3\xf1\x8by\xf24\xe8" +
	"!D\xf7S]L\x99\x8d\\:+\x9c\xd4\x87dM" +
	"]'\xfc\xb4*\xb4O\x87\xa4+\x1f/\xbe_(\x98" +
	"\x890\xa4C\x08\x92{y\xf6\xff\x17\xf6\xfc\xd6\x05P" +
	"B%&\"N}E\xce\xa9[\xc2\xe5\xadpa\xf7" +
	"\xaaG\x1e\\\xbb\x7f\xb5\xb4s=\xed\xe0\x95\x1a)\x17" +
	"\x04\xccw\xcb\x1fn>^*\xed<Hk\xb8@\x17" +
	"\x82S\xc6\xe6\xb3\x95\xdb+kei\"\xe3\x08}\xa4" +
	"NQ~\xca\xd3I@7\x1a\xbb\xd1\x15\xbe~\xeb9" +
	"(!\xeak\x01\xd5'tN]\x17\xc2UzW=" +
	"\xc4k\xb8/G\xba\x96\xa5\xd7\xc7\xde\x94&\x0fHM" +
	"<Y\x93xr01\xdf|g\xef\xc1\xcd\xdd\x92S" +
	"\xd2\x9a\x9a\x17\xdc\xb2\xd2$4\xbb\x13\x99xk\xca\xca" +
	"\xb5\xd0\xb8\x91\xb13\x9d\x9a\x95k1\x12\x89>\xc3\x89" +
	"\x8f5\xc4L\x96\x1d\xa7\x0e\xd3%*\x01H\x08\xa0\x04" +
	";\x01\xf4J\x8az-\xc1\x1e\xe6\x18N\x96a\x05\x10" +
	"\xac\x00\xf4\xac$\xdf*i:\x9a\x95\xb3M\xa7?m" +
	"\x1f\xb6\x92\x05G\x07w86\xf9\x8e\xd5)\xd310" +
	"\xec\x8f\x1b\x10\xc3%\xce\xc4s\xde\xb6\xa4V2\x8aX" +
	"\xeav\x06@\x0fS\xd4\x7f%\xe823\x9e\xb6\x13\xec" +
	"\x00\xa6\xf7\x9b9'\x96\xceR;\x812\x10\x94\x7f\xac" +
	"m\xd4\x980R\x0c\xc0\xd3bA\xdbg\xc8N|\xac" +
	",\xb8x\x8d\x06~\x0d\x96d\x18\x02\x8cR\xc4 \x10" +
	"~\xfc\x0a\xe8\xfe\xb4}4\xad1N&\xc2\xd1\xfc," +
	"\xeb\xdd\xc6&j\xefd\xdc\xe1;EF\xb9\x08\xc3\xfe" +
	"6\xec\x0e\xb9\xd0\xcc\xcai\x0c\x05\xe3J\xcf\xad\x91\xf7" +
	"j\xa0\xa8\xb7\x11T\x10k\xf9~(\xcd}\x00\xfa\xef" +
	"\x14\xf5\xbf\x08\xf6d\xb2\xa3\xfb\xcc\xbc\xb8z\x10p:" +
	"\x9e\xb6\x1d\xd3v\x8a\xdf\xe585\x0bs<\xa1\x8a\x06" +
	"\x00\xbc\xf5\xc5\xe2\xa3\xa0\xe83@\x94A\x19\xd1\xfb\xf3" +
	"\xb1\xb8\x9d\xca\x7f\xa3@\x94\xbfe$\xde>b\xf1\xb5" +
	"Q\x1a\x87\x80(\xf5\xb2[\x1c+n\xcf\x15z\xd1-" +
	"\xa2\x07Yc\xc9\xc2\xb7\x80\x07\x00\xbd\x18\xc5\xef\x8e+" +
	"jT\xf3\x7f\xa3\x94\xf1o>c9\xc5\x92\x18\xf6_" +
	"\x80o\x10\x1e\xc8Y\x8eFY9\xe2a\x9f\xa6\x87\xb8" +
	"\x9d#\xfe\x83\xa2\xfe/A7>n\x99\xb6\xb3'\x01" +
	"41\x81U@\xb0\xeaK\xd0\x9f\x03\x00\x00\xff\xff\xfe" +
	"tx\x9f"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x873cb130ee0d5c36,
		0x926c1f797f824577,
		0x95896509ee825aa6,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xb6ccb7cd5c0fca73,
		0xb8d4c1f6bef26505,
		0xdad8c5d8def4618e,
		0xe5c2bb103bbd5250,
		0xf080ef04be3b5ceb,
		0xf45944c62d9e640d)
}
