// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type ConvoMsg struct{ capnp.Struct }

// ConvoMsg_TypeID is the unique identifier for the type ConvoMsg.
const ConvoMsg_TypeID = 0xe4fb25d5577e606e

func NewConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func NewRootConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func ReadRootConvoMsg(msg *capnp.Message) (ConvoMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMsg{root.Struct()}, err
}

func (s ConvoMsg) String() string {
	str, _ := text.Marshal(0xe4fb25d5577e606e, s.Struct)
	return str
}

func (s ConvoMsg) PubKeyOrAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasPubKeyOrAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetPubKeyOrAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoMsg_List is a list of ConvoMsg.
type ConvoMsg_List struct{ capnp.List }

// NewConvoMsg creates a new list of ConvoMsg.
func NewConvoMsg_List(s *capnp.Segment, sz int32) (ConvoMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoMsg_List{l}, err
}

func (s ConvoMsg_List) At(i int) ConvoMsg { return ConvoMsg{s.List.Struct(i)} }

func (s ConvoMsg_List) Set(i int, v ConvoMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMsg_List) String() string {
	str, _ := text.MarshalList(0xe4fb25d5577e606e, s.List)
	return str
}

// ConvoMsg_Promise is a wrapper for a ConvoMsg promised by a client call.
type ConvoMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMsg_Promise) Struct() (ConvoMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (ConvoMsg_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMsg_List{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v ConvoMsg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated ConvoMsg_List, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (ConvoMsg_List, error) {
	l, err := NewConvoMsg_List(s.Struct.Segment(), n)
	if err != nil {
		return ConvoMsg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0x926c1f797f824577

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda|\x92\xbfkSQ\x1c\xc5\xcf\xb9\xf7%\xa9C" +
	"\xd2w\xf3:u\xc9\x12A\xa5T\xaa\x0eR\xc1\xd4\x88" +
	"\x08\x95\xe0\xbbY\x9c\x04o_B\x1bi^\xc2\xfba" +
	"\xd3A\x0b\xeeB\xe9\xae\xa0P\x1c\xd4\xcdIq\x11\x1c" +
	"\x1c\x1c\x9d\x04'\xc5?@DT\xe4\xc9{1}5" +
	"\x83\xdb\xf7^>|\xee\xe5|\x8f\xfdqE,\x15j" +
	"\x12\xd0\xf5B1\xd9\xbatwg\xbb\xb6\xb9\x07]%" +
	"\x01\xab\x04\x9c\x8e9O\xd0\xb9\xcd\x06\x98|X\xb5\x9e" +
	"\x7f\x7f\xf2u\x1f\xaaJ\xa0\xc0\x14\xb8\xcfj\x0a\xecg" +
	"\xc0\xb3\xdd\xf3_\xfc\x07\xdf\x1eCU\x98\xfc\x9co\xab" +
	"\xdd\xda\xd3\x87c\xd0y\xc3G\xce\xbblz\x9b\xb1\xfe" +
	"\x8d;\xd7\xde\x1f\xfd\xf5i\x8a\x15)\xf1\x83/\x1cf" +
	"\xd3on\x81\x89\xdb~u\xce~\xf9\xfa3TE\xe6" +
	",\xe8\\\x17{N7\x03\x8d\xb8\xec\xdc\x13%,$" +
	"\xc1\xd0;\xd9\xef\x8d\x16\xa5g\x86\xfep\xb9\xd5\x1b-" +
	"\x9aN\xa7i\"o\xa3\xde\xee\x86\xf1\xa6\x8cBmI" +
	"\x0b\xb0\x08\xa8\xf22\xa0g$\xf5\x9c`#\x8cL\x14" +
	"\x87,B\xb0\x08\xfeW\xe5\x9a\xc0\xf4\xf9\x8f\xe9Tn" +
	"\xaa\xad\xa5\x10\xed<\x12\x90\xf6!%\xc7\xca\xa6)E" +
	"\xde\x86K\x1e\xf6\x9c\xf8\xeb\xa9\x0b\xce\xf6\xc3\xf5\x90\x15" +
	"\xd0\x95\xa4\x9d\x87\x06\xa6\x97\xd3\xb6\x8b\x83\x86\x7fk\xd0" +
	"\x0a\xd7S\xe1\xcc\x81\xf0\xf8M@\x1f\x93\xd4g\x04\x15" +
	"9\x97nW-5\x01\xbd \xa9\xcf\x0a&\xc3x\xed" +
	"Jw\xfbj\x80\xd9\x0b\x9dN\xc02\x04\xcb\xe0\x8e7" +
	"\xf0\xa3\xae\x1fM\xce\xd3\xcf\xb5z\x1c\x8d\xbf^\x00\x0e" +
	"\xda\xc1I\x8f\x94Z\x85PGJ\xc9$3\x00+t" +
	"\xc9?\x01\x00\x00\xff\xff\x1e\xe6\xa1\xb1"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x926c1f797f824577,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xe4fb25d5577e606e,
		0xe5c2bb103bbd5250)
}
