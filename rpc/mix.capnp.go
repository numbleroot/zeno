// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type ConvoMsg struct{ capnp.Struct }

// ConvoMsg_TypeID is the unique identifier for the type ConvoMsg.
const ConvoMsg_TypeID = 0xe4fb25d5577e606e

func NewConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func NewRootConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func ReadRootConvoMsg(msg *capnp.Message) (ConvoMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMsg{root.Struct()}, err
}

func (s ConvoMsg) String() string {
	str, _ := text.Marshal(0xe4fb25d5577e606e, s.Struct)
	return str
}

func (s ConvoMsg) PubKeyOrAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasPubKeyOrAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetPubKeyOrAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoMsg_List is a list of ConvoMsg.
type ConvoMsg_List struct{ capnp.List }

// NewConvoMsg creates a new list of ConvoMsg.
func NewConvoMsg_List(s *capnp.Segment, sz int32) (ConvoMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoMsg_List{l}, err
}

func (s ConvoMsg_List) At(i int) ConvoMsg { return ConvoMsg{s.List.Struct(i)} }

func (s ConvoMsg_List) Set(i int, v ConvoMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMsg_List) String() string {
	str, _ := text.MarshalList(0xe4fb25d5577e606e, s.List)
	return str
}

// ConvoMsg_Promise is a wrapper for a ConvoMsg promised by a client call.
type ConvoMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMsg_Promise) Struct() (ConvoMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (ConvoMsg_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMsg_List{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v ConvoMsg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated ConvoMsg_List, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (ConvoMsg_List, error) {
	l, err := NewConvoMsg_List(s.Struct.Segment(), n)
	if err != nil {
		return ConvoMsg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) AddConvoMsg(ctx context.Context, params func(Mix_addConvoMsg_Params) error, opts ...capnp.CallOption) Mix_addConvoMsg_Results_Promise {
	if c.Client == nil {
		return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addConvoMsg_Params{Struct: s}) }
	}
	return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	AddConvoMsg(Mix_addConvoMsg) error

	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addConvoMsg{c, opts, Mix_addConvoMsg_Params{Struct: p}, Mix_addConvoMsg_Results{Struct: r}}
			return s.AddConvoMsg(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_addConvoMsg holds the arguments for a server call to Mix.addConvoMsg.
type Mix_addConvoMsg struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addConvoMsg_Params
	Results Mix_addConvoMsg_Results
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_addConvoMsg_Params struct{ capnp.Struct }

// Mix_addConvoMsg_Params_TypeID is the unique identifier for the type Mix_addConvoMsg_Params.
const Mix_addConvoMsg_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func NewRootMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func ReadRootMix_addConvoMsg_Params(msg *capnp.Message) (Mix_addConvoMsg_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Params{root.Struct()}, err
}

func (s Mix_addConvoMsg_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Params) Msg() (ConvoMsg, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMsg{Struct: p.Struct()}, err
}

func (s Mix_addConvoMsg_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addConvoMsg_Params) SetMsg(v ConvoMsg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ConvoMsg struct, preferring placement in s's segment.
func (s Mix_addConvoMsg_Params) NewMsg() (ConvoMsg, error) {
	ss, err := NewConvoMsg(s.Struct.Segment())
	if err != nil {
		return ConvoMsg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addConvoMsg_Params_List is a list of Mix_addConvoMsg_Params.
type Mix_addConvoMsg_Params_List struct{ capnp.List }

// NewMix_addConvoMsg_Params creates a new list of Mix_addConvoMsg_Params.
func NewMix_addConvoMsg_Params_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addConvoMsg_Params_List{l}, err
}

func (s Mix_addConvoMsg_Params_List) At(i int) Mix_addConvoMsg_Params {
	return Mix_addConvoMsg_Params{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Params_List) Set(i int, v Mix_addConvoMsg_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_addConvoMsg_Params_Promise is a wrapper for a Mix_addConvoMsg_Params promised by a client call.
type Mix_addConvoMsg_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Params_Promise) Struct() (Mix_addConvoMsg_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Params{s}, err
}

func (p Mix_addConvoMsg_Params_Promise) Msg() ConvoMsg_Promise {
	return ConvoMsg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Results struct{ capnp.Struct }

// Mix_addConvoMsg_Results_TypeID is the unique identifier for the type Mix_addConvoMsg_Results.
const Mix_addConvoMsg_Results_TypeID = 0x926c1f797f824577

func NewMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func NewRootMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func ReadRootMix_addConvoMsg_Results(msg *capnp.Message) (Mix_addConvoMsg_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Results{root.Struct()}, err
}

func (s Mix_addConvoMsg_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addConvoMsg_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addConvoMsg_Results_List is a list of Mix_addConvoMsg_Results.
type Mix_addConvoMsg_Results_List struct{ capnp.List }

// NewMix_addConvoMsg_Results creates a new list of Mix_addConvoMsg_Results.
func NewMix_addConvoMsg_Results_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addConvoMsg_Results_List{l}, err
}

func (s Mix_addConvoMsg_Results_List) At(i int) Mix_addConvoMsg_Results {
	return Mix_addConvoMsg_Results{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Results_List) Set(i int, v Mix_addConvoMsg_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_addConvoMsg_Results_Promise is a wrapper for a Mix_addConvoMsg_Results promised by a client call.
type Mix_addConvoMsg_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Results_Promise) Struct() (Mix_addConvoMsg_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Results{s}, err
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xf080ef04be3b5ceb

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xf080ef04be3b5ceb, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xf080ef04be3b5ceb, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0xb6ccb7cd5c0fca73

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0xb6ccb7cd5c0fca73, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0xb6ccb7cd5c0fca73, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x94\x93\xcdk\x13A\x18\xc6\xdfgf\xd3\xed%" +
	"\x1f\x93\xad\x97B\x09\x95\x14L\xd1j\xaa\x07m\xc1\xc4" +
	"\x14/\x95\xe0n.\"\xf4\xe0\xe6\x834\x92lBf" +
	"c\x93\x83V\xbdx-\xfd\x03\x04\x05\xf1\xa0\xdeDA" +
	"\xd1\x83G\xb1x\xeaI<\x08\x16\x0f\x1e\x14\xa4\x08\x8a" +
	"\xacL\xd2d\xd3\x80\x8a\xb7Y\xf8\xf1{\xe7}\xe6\xd9" +
	"c\x09\xa4Y2\xf0\x96\x13Y\x87\x03c\xde\xda\xd9\x9b" +
	"\xeb\x9dXu\x93\xac(@\xa4\xe9D\xc7\xb70\x0f\x82" +
	"\xb1\x8d\x14\xc1{\xb7\xac=\xfe\xfe\xe0\xdb=\x12Q\x10" +
	"\x05\xa0\x80]\xcc*\xe0W\x17x\xb4q\xfa\x93s{" +
	"\xf7>\x89\x10\xbc\x1f\x939\xb1\x11{x\xa7\x07\x1aS" +
	"\xec\xae1\xc3\xd4i\x9a)V\xbe\x0e\xafl=}\xf3" +
	"dx\x9a\xc5&\x95\xecb\x17p.]\xbb\xb0=\xf3" +
	"\xf3\xe3\x88\xac\xab\xe8\xb0g\xc6\x8d\xee\xe9*[#x" +
	"f\xee\xc5b\xe4\xf9\xab\x1d\x12!\xee\xb3\x04\xe3=\xdb" +
	"4v\xba\xe0\x07v\xcb8\xc5u\"\xef\xf3\xca\xe2K" +
	"\xed\xcb\xf5\xaf\xc3kL\xf3\xa8\x9a\x9c\xe0):\xe25" +
	"\x1b\x85\xa3\xb5J{\x8e\x17\xec\x86\xd3X\xc8V\xdas" +
	"v\xb1\xb8Tw\xae\xd4\xb3\xb2\x1c\xcf\x95b\xb2Uu" +
	"\xa5\xa5q\x8dH\x03\x91\x08.\x10Y\xe3\x1c\xd6\x04C" +
	"J\xba\xb6\xdb\x92\x18#\x861\xc2\xbfl\xa6\x1dn\xda" +
	"\xb5}\xb2\x83\xbeL\xaf\xc92\"~\x16\x04D\x86\x9c" +
	"\xe893\xb6\xee\x16VM`\xd82\xbbg\x893\x84" +
	"k\xb2,\x11\"\x98\x1c#\xb6\xd0\x1fo\x98\xb1\xdd\xc2" +
	"j<W\x92\xad*\xff\xefe\xf7.\xb6TO\xf5\xd6" +
	"Tw\x1b\x1f\x18\x12\x97\x89\xacC\x1c\xd6\x09\x06\x01L" +
	"\xa8\x02\x88dF\xf5\x90\xc3:\xc9\xe05Z\xf9s\xa5" +
	"\xce\xf9&\x85\xcf\x14\x8bM\x04\x89!HX/\xd4\x1d" +
	"\xb7\xe4\xb8\xfd\xef\xd1q\xd9\x0a\xda\xbdI\x01\xa2A]" +
	"\xd1/\xb6H\xe6\x89\x89\x84\x0e\x0c:\x80~\x0d\xc5\xd4" +
	"21q@\xf7\xfaoCzV\x96\xd3\xf0\xfaI\x10" +
	"Q\x1a&\xfe\x9e\x96i7\xed\x1a\xf6\x855\xef\x87\x15" +
	"\xcb+\x08\x11\xff?\xe9=\xe7\xef\x00\x00\x00\xff\xff{" +
	"j\xeb\xea"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x926c1f797f824577,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xb6ccb7cd5c0fca73,
		0xe4fb25d5577e606e,
		0xe5c2bb103bbd5250,
		0xf080ef04be3b5ceb)
}
