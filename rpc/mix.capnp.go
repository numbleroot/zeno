// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ConvoMsg struct{ capnp.Struct }

// ConvoMsg_TypeID is the unique identifier for the type ConvoMsg.
const ConvoMsg_TypeID = 0xe4fb25d5577e606e

func NewConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func NewRootConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConvoMsg{st}, err
}

func ReadRootConvoMsg(msg *capnp.Message) (ConvoMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMsg{root.Struct()}, err
}

func (s ConvoMsg) String() string {
	str, _ := text.Marshal(0xe4fb25d5577e606e, s.Struct)
	return str
}

func (s ConvoMsg) PubKeyOrAddr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasPubKeyOrAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetPubKeyOrAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ConvoMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetContent(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ConvoMsg_List is a list of ConvoMsg.
type ConvoMsg_List struct{ capnp.List }

// NewConvoMsg creates a new list of ConvoMsg.
func NewConvoMsg_List(s *capnp.Segment, sz int32) (ConvoMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConvoMsg_List{l}, err
}

func (s ConvoMsg_List) At(i int) ConvoMsg { return ConvoMsg{s.List.Struct(i)} }

func (s ConvoMsg_List) Set(i int, v ConvoMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMsg_List) String() string {
	str, _ := text.MarshalList(0xe4fb25d5577e606e, s.List)
	return str
}

// ConvoMsg_Promise is a wrapper for a ConvoMsg promised by a client call.
type ConvoMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMsg_Promise) Struct() (ConvoMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (ConvoMsg_List, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMsg_List{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v ConvoMsg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated ConvoMsg_List, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (ConvoMsg_List, error) {
	l, err := NewConvoMsg_List(s.Struct.Segment(), n)
	if err != nil {
		return ConvoMsg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x12hr`2d\x15gb`\x08\x94`e" +
	"\xfb\xbfv\x82\xdd\xf3\xbcy_\x973\x08\xf21\xfe\xff" +
	"%\x15$8A~\xcdB\x06VFv\x06\x06\xc1\x8f" +
	"\x8b\x04\x7f\x82\xe8\xaf\xf6\x0c\x8c\xff\xf3\x12\xea\xc2\xaf\xaa" +
	"\xfe~\x82\xa6\x90\x89\x9d\x81AX\x95q\x97\xb0.H" +
	"\x8b\xb0&c9\x83\xee\xff\xa2\x82d\xfd\xdc\xcc\x0a=" +
	"\xc6\xe4\xc4\x82\xbc\x02+\xa7D\xf6\x92\xe4\x8c\x00F\xc6" +
	"@\x16f\x16\x06\x06\x16F\x06\x06A^-\x06\x86@" +
	"\x0ef\xc6@\x15&F\xfe\xdc\xe2\xf4bF>\x06\xc6" +
	"\x00fFF\x01\x84M\x0c\x8c At\xd3\x9c\xf3\xed" +
	"\xf3\xca\xf2}\x8b\xd3A\x06r\xc0\x0d\xd4\xccb`\x08" +
	"\xd4`f\x0c4ab\x14dd\x14a\x04\x09\x1a:" +
	"10\x04\xea03\x06Z01\xfe/(M\xf2N" +
	"\xad\xf4/b\xe0wLI)b\xe4e`b\xe4e" +
	"`\xacO\xce\xcf+I\xcd+\x81\xf1\x01\x01\x00\x00\xff" +
	"\xffS\xa2Ed"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0xa7f59e6ee73e90ad,
		0xe4fb25d5577e606e)
}
