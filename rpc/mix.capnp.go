// Code generated by capnpc-go. DO NOT EDIT.

package rpc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type MixnetConfig struct{ capnp.Struct }

// MixnetConfig_TypeID is the unique identifier for the type MixnetConfig.
const MixnetConfig_TypeID = 0x95896509ee825aa6

func NewMixnetConfig(s *capnp.Segment) (MixnetConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MixnetConfig{st}, err
}

func NewRootMixnetConfig(s *capnp.Segment) (MixnetConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MixnetConfig{st}, err
}

func ReadRootMixnetConfig(msg *capnp.Message) (MixnetConfig, error) {
	root, err := msg.RootPtr()
	return MixnetConfig{root.Struct()}, err
}

func (s MixnetConfig) String() string {
	str, _ := text.Marshal(0x95896509ee825aa6, s.Struct)
	return str
}

func (s MixnetConfig) SecondsToNextRound() uint16 {
	return s.Struct.Uint16(0)
}

func (s MixnetConfig) SetSecondsToNextRound(v uint16) {
	s.Struct.SetUint16(0, v)
}

// MixnetConfig_List is a list of MixnetConfig.
type MixnetConfig_List struct{ capnp.List }

// NewMixnetConfig creates a new list of MixnetConfig.
func NewMixnetConfig_List(s *capnp.Segment, sz int32) (MixnetConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MixnetConfig_List{l}, err
}

func (s MixnetConfig_List) At(i int) MixnetConfig { return MixnetConfig{s.List.Struct(i)} }

func (s MixnetConfig_List) Set(i int, v MixnetConfig) error { return s.List.SetStruct(i, v.Struct) }

func (s MixnetConfig_List) String() string {
	str, _ := text.MarshalList(0x95896509ee825aa6, s.List)
	return str
}

// MixnetConfig_Promise is a wrapper for a MixnetConfig promised by a client call.
type MixnetConfig_Promise struct{ *capnp.Pipeline }

func (p MixnetConfig_Promise) Struct() (MixnetConfig, error) {
	s, err := p.Pipeline.Struct()
	return MixnetConfig{s}, err
}

type ConvoMsg struct{ capnp.Struct }

// ConvoMsg_TypeID is the unique identifier for the type ConvoMsg.
const ConvoMsg_TypeID = 0xe4fb25d5577e606e

func NewConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConvoMsg{st}, err
}

func NewRootConvoMsg(s *capnp.Segment) (ConvoMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConvoMsg{st}, err
}

func ReadRootConvoMsg(msg *capnp.Message) (ConvoMsg, error) {
	root, err := msg.RootPtr()
	return ConvoMsg{root.Struct()}, err
}

func (s ConvoMsg) String() string {
	str, _ := text.Marshal(0xe4fb25d5577e606e, s.Struct)
	return str
}

func (s ConvoMsg) Content() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ConvoMsg) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConvoMsg) SetContent(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ConvoMsg_List is a list of ConvoMsg.
type ConvoMsg_List struct{ capnp.List }

// NewConvoMsg creates a new list of ConvoMsg.
func NewConvoMsg_List(s *capnp.Segment, sz int32) (ConvoMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ConvoMsg_List{l}, err
}

func (s ConvoMsg_List) At(i int) ConvoMsg { return ConvoMsg{s.List.Struct(i)} }

func (s ConvoMsg_List) Set(i int, v ConvoMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s ConvoMsg_List) String() string {
	str, _ := text.MarshalList(0xe4fb25d5577e606e, s.List)
	return str
}

// ConvoMsg_Promise is a wrapper for a ConvoMsg promised by a client call.
type ConvoMsg_Promise struct{ *capnp.Pipeline }

func (p ConvoMsg_Promise) Struct() (ConvoMsg, error) {
	s, err := p.Pipeline.Struct()
	return ConvoMsg{s}, err
}

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xa7f59e6ee73e90ad

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xa7f59e6ee73e90ad, s.Struct)
	return str
}

func (s Batch) Msgs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Batch) HasMsgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) SetMsgs(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMsgs sets the msgs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Batch) NewMsgs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xa7f59e6ee73e90ad, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xe5c2bb103bbd5250

func (c Mix) GetMixnetConfig(ctx context.Context, params func(Mix_getMixnetConfig_Params) error, opts ...capnp.CallOption) Mix_getMixnetConfig_Results_Promise {
	if c.Client == nil {
		return Mix_getMixnetConfig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "getMixnetConfig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_getMixnetConfig_Params{Struct: s}) }
	}
	return Mix_getMixnetConfig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddConvoMsg(ctx context.Context, params func(Mix_addConvoMsg_Params) error, opts ...capnp.CallOption) Mix_addConvoMsg_Results_Promise {
	if c.Client == nil {
		return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addConvoMsg_Params{Struct: s}) }
	}
	return Mix_addConvoMsg_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Mix) AddBatch(ctx context.Context, params func(Mix_addBatch_Params) error, opts ...capnp.CallOption) Mix_addBatch_Results_Promise {
	if c.Client == nil {
		return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      2,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_addBatch_Params{Struct: s}) }
	}
	return Mix_addBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	GetMixnetConfig(Mix_getMixnetConfig) error

	AddConvoMsg(Mix_addConvoMsg) error

	AddBatch(Mix_addBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      0,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "getMixnetConfig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_getMixnetConfig{c, opts, Mix_getMixnetConfig_Params{Struct: p}, Mix_getMixnetConfig_Results{Struct: r}}
			return s.GetMixnetConfig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      1,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addConvoMsg",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addConvoMsg{c, opts, Mix_addConvoMsg_Params{Struct: p}, Mix_addConvoMsg_Results{Struct: r}}
			return s.AddConvoMsg(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe5c2bb103bbd5250,
			MethodID:      2,
			InterfaceName: "rpc/mix.capnp:Mix",
			MethodName:    "addBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_addBatch{c, opts, Mix_addBatch_Params{Struct: p}, Mix_addBatch_Results{Struct: r}}
			return s.AddBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Mix_getMixnetConfig holds the arguments for a server call to Mix.getMixnetConfig.
type Mix_getMixnetConfig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_getMixnetConfig_Params
	Results Mix_getMixnetConfig_Results
}

// Mix_addConvoMsg holds the arguments for a server call to Mix.addConvoMsg.
type Mix_addConvoMsg struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addConvoMsg_Params
	Results Mix_addConvoMsg_Results
}

// Mix_addBatch holds the arguments for a server call to Mix.addBatch.
type Mix_addBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_addBatch_Params
	Results Mix_addBatch_Results
}

type Mix_getMixnetConfig_Params struct{ capnp.Struct }

// Mix_getMixnetConfig_Params_TypeID is the unique identifier for the type Mix_getMixnetConfig_Params.
const Mix_getMixnetConfig_Params_TypeID = 0xa5f3abf7b4044adb

func NewMix_getMixnetConfig_Params(s *capnp.Segment) (Mix_getMixnetConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Mix_getMixnetConfig_Params{st}, err
}

func NewRootMix_getMixnetConfig_Params(s *capnp.Segment) (Mix_getMixnetConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Mix_getMixnetConfig_Params{st}, err
}

func ReadRootMix_getMixnetConfig_Params(msg *capnp.Message) (Mix_getMixnetConfig_Params, error) {
	root, err := msg.RootPtr()
	return Mix_getMixnetConfig_Params{root.Struct()}, err
}

func (s Mix_getMixnetConfig_Params) String() string {
	str, _ := text.Marshal(0xa5f3abf7b4044adb, s.Struct)
	return str
}

// Mix_getMixnetConfig_Params_List is a list of Mix_getMixnetConfig_Params.
type Mix_getMixnetConfig_Params_List struct{ capnp.List }

// NewMix_getMixnetConfig_Params creates a new list of Mix_getMixnetConfig_Params.
func NewMix_getMixnetConfig_Params_List(s *capnp.Segment, sz int32) (Mix_getMixnetConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Mix_getMixnetConfig_Params_List{l}, err
}

func (s Mix_getMixnetConfig_Params_List) At(i int) Mix_getMixnetConfig_Params {
	return Mix_getMixnetConfig_Params{s.List.Struct(i)}
}

func (s Mix_getMixnetConfig_Params_List) Set(i int, v Mix_getMixnetConfig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_getMixnetConfig_Params_List) String() string {
	str, _ := text.MarshalList(0xa5f3abf7b4044adb, s.List)
	return str
}

// Mix_getMixnetConfig_Params_Promise is a wrapper for a Mix_getMixnetConfig_Params promised by a client call.
type Mix_getMixnetConfig_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_getMixnetConfig_Params_Promise) Struct() (Mix_getMixnetConfig_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_getMixnetConfig_Params{s}, err
}

type Mix_getMixnetConfig_Results struct{ capnp.Struct }

// Mix_getMixnetConfig_Results_TypeID is the unique identifier for the type Mix_getMixnetConfig_Results.
const Mix_getMixnetConfig_Results_TypeID = 0x926c1f797f824577

func NewMix_getMixnetConfig_Results(s *capnp.Segment) (Mix_getMixnetConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_getMixnetConfig_Results{st}, err
}

func NewRootMix_getMixnetConfig_Results(s *capnp.Segment) (Mix_getMixnetConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_getMixnetConfig_Results{st}, err
}

func ReadRootMix_getMixnetConfig_Results(msg *capnp.Message) (Mix_getMixnetConfig_Results, error) {
	root, err := msg.RootPtr()
	return Mix_getMixnetConfig_Results{root.Struct()}, err
}

func (s Mix_getMixnetConfig_Results) String() string {
	str, _ := text.Marshal(0x926c1f797f824577, s.Struct)
	return str
}

func (s Mix_getMixnetConfig_Results) Meta() (MixnetConfig, error) {
	p, err := s.Struct.Ptr(0)
	return MixnetConfig{Struct: p.Struct()}, err
}

func (s Mix_getMixnetConfig_Results) HasMeta() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_getMixnetConfig_Results) SetMeta(v MixnetConfig) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated MixnetConfig struct, preferring placement in s's segment.
func (s Mix_getMixnetConfig_Results) NewMeta() (MixnetConfig, error) {
	ss, err := NewMixnetConfig(s.Struct.Segment())
	if err != nil {
		return MixnetConfig{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_getMixnetConfig_Results_List is a list of Mix_getMixnetConfig_Results.
type Mix_getMixnetConfig_Results_List struct{ capnp.List }

// NewMix_getMixnetConfig_Results creates a new list of Mix_getMixnetConfig_Results.
func NewMix_getMixnetConfig_Results_List(s *capnp.Segment, sz int32) (Mix_getMixnetConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_getMixnetConfig_Results_List{l}, err
}

func (s Mix_getMixnetConfig_Results_List) At(i int) Mix_getMixnetConfig_Results {
	return Mix_getMixnetConfig_Results{s.List.Struct(i)}
}

func (s Mix_getMixnetConfig_Results_List) Set(i int, v Mix_getMixnetConfig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_getMixnetConfig_Results_List) String() string {
	str, _ := text.MarshalList(0x926c1f797f824577, s.List)
	return str
}

// Mix_getMixnetConfig_Results_Promise is a wrapper for a Mix_getMixnetConfig_Results promised by a client call.
type Mix_getMixnetConfig_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_getMixnetConfig_Results_Promise) Struct() (Mix_getMixnetConfig_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_getMixnetConfig_Results{s}, err
}

func (p Mix_getMixnetConfig_Results_Promise) Meta() MixnetConfig_Promise {
	return MixnetConfig_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Params struct{ capnp.Struct }

// Mix_addConvoMsg_Params_TypeID is the unique identifier for the type Mix_addConvoMsg_Params.
const Mix_addConvoMsg_Params_TypeID = 0xf080ef04be3b5ceb

func NewMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func NewRootMix_addConvoMsg_Params(s *capnp.Segment) (Mix_addConvoMsg_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addConvoMsg_Params{st}, err
}

func ReadRootMix_addConvoMsg_Params(msg *capnp.Message) (Mix_addConvoMsg_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Params{root.Struct()}, err
}

func (s Mix_addConvoMsg_Params) String() string {
	str, _ := text.Marshal(0xf080ef04be3b5ceb, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Params) Msg() (ConvoMsg, error) {
	p, err := s.Struct.Ptr(0)
	return ConvoMsg{Struct: p.Struct()}, err
}

func (s Mix_addConvoMsg_Params) HasMsg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addConvoMsg_Params) SetMsg(v ConvoMsg) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ConvoMsg struct, preferring placement in s's segment.
func (s Mix_addConvoMsg_Params) NewMsg() (ConvoMsg, error) {
	ss, err := NewConvoMsg(s.Struct.Segment())
	if err != nil {
		return ConvoMsg{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addConvoMsg_Params_List is a list of Mix_addConvoMsg_Params.
type Mix_addConvoMsg_Params_List struct{ capnp.List }

// NewMix_addConvoMsg_Params creates a new list of Mix_addConvoMsg_Params.
func NewMix_addConvoMsg_Params_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addConvoMsg_Params_List{l}, err
}

func (s Mix_addConvoMsg_Params_List) At(i int) Mix_addConvoMsg_Params {
	return Mix_addConvoMsg_Params{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Params_List) Set(i int, v Mix_addConvoMsg_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Params_List) String() string {
	str, _ := text.MarshalList(0xf080ef04be3b5ceb, s.List)
	return str
}

// Mix_addConvoMsg_Params_Promise is a wrapper for a Mix_addConvoMsg_Params promised by a client call.
type Mix_addConvoMsg_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Params_Promise) Struct() (Mix_addConvoMsg_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Params{s}, err
}

func (p Mix_addConvoMsg_Params_Promise) Msg() ConvoMsg_Promise {
	return ConvoMsg_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addConvoMsg_Results struct{ capnp.Struct }

// Mix_addConvoMsg_Results_TypeID is the unique identifier for the type Mix_addConvoMsg_Results.
const Mix_addConvoMsg_Results_TypeID = 0xb6ccb7cd5c0fca73

func NewMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func NewRootMix_addConvoMsg_Results(s *capnp.Segment) (Mix_addConvoMsg_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addConvoMsg_Results{st}, err
}

func ReadRootMix_addConvoMsg_Results(msg *capnp.Message) (Mix_addConvoMsg_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addConvoMsg_Results{root.Struct()}, err
}

func (s Mix_addConvoMsg_Results) String() string {
	str, _ := text.Marshal(0xb6ccb7cd5c0fca73, s.Struct)
	return str
}

func (s Mix_addConvoMsg_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addConvoMsg_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addConvoMsg_Results_List is a list of Mix_addConvoMsg_Results.
type Mix_addConvoMsg_Results_List struct{ capnp.List }

// NewMix_addConvoMsg_Results creates a new list of Mix_addConvoMsg_Results.
func NewMix_addConvoMsg_Results_List(s *capnp.Segment, sz int32) (Mix_addConvoMsg_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addConvoMsg_Results_List{l}, err
}

func (s Mix_addConvoMsg_Results_List) At(i int) Mix_addConvoMsg_Results {
	return Mix_addConvoMsg_Results{s.List.Struct(i)}
}

func (s Mix_addConvoMsg_Results_List) Set(i int, v Mix_addConvoMsg_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addConvoMsg_Results_List) String() string {
	str, _ := text.MarshalList(0xb6ccb7cd5c0fca73, s.List)
	return str
}

// Mix_addConvoMsg_Results_Promise is a wrapper for a Mix_addConvoMsg_Results promised by a client call.
type Mix_addConvoMsg_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addConvoMsg_Results_Promise) Struct() (Mix_addConvoMsg_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addConvoMsg_Results{s}, err
}

type Mix_addBatch_Params struct{ capnp.Struct }

// Mix_addBatch_Params_TypeID is the unique identifier for the type Mix_addBatch_Params.
const Mix_addBatch_Params_TypeID = 0xb8d4c1f6bef26505

func NewMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func NewRootMix_addBatch_Params(s *capnp.Segment) (Mix_addBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_addBatch_Params{st}, err
}

func ReadRootMix_addBatch_Params(msg *capnp.Message) (Mix_addBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Params{root.Struct()}, err
}

func (s Mix_addBatch_Params) String() string {
	str, _ := text.Marshal(0xb8d4c1f6bef26505, s.Struct)
	return str
}

func (s Mix_addBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_addBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_addBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_addBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_addBatch_Params_List is a list of Mix_addBatch_Params.
type Mix_addBatch_Params_List struct{ capnp.List }

// NewMix_addBatch_Params creates a new list of Mix_addBatch_Params.
func NewMix_addBatch_Params_List(s *capnp.Segment, sz int32) (Mix_addBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_addBatch_Params_List{l}, err
}

func (s Mix_addBatch_Params_List) At(i int) Mix_addBatch_Params {
	return Mix_addBatch_Params{s.List.Struct(i)}
}

func (s Mix_addBatch_Params_List) Set(i int, v Mix_addBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Params_List) String() string {
	str, _ := text.MarshalList(0xb8d4c1f6bef26505, s.List)
	return str
}

// Mix_addBatch_Params_Promise is a wrapper for a Mix_addBatch_Params promised by a client call.
type Mix_addBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Params_Promise) Struct() (Mix_addBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Params{s}, err
}

func (p Mix_addBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_addBatch_Results struct{ capnp.Struct }

// Mix_addBatch_Results_TypeID is the unique identifier for the type Mix_addBatch_Results.
const Mix_addBatch_Results_TypeID = 0x873cb130ee0d5c36

func NewMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func NewRootMix_addBatch_Results(s *capnp.Segment) (Mix_addBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Mix_addBatch_Results{st}, err
}

func ReadRootMix_addBatch_Results(msg *capnp.Message) (Mix_addBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_addBatch_Results{root.Struct()}, err
}

func (s Mix_addBatch_Results) String() string {
	str, _ := text.Marshal(0x873cb130ee0d5c36, s.Struct)
	return str
}

func (s Mix_addBatch_Results) Status() uint8 {
	return s.Struct.Uint8(0)
}

func (s Mix_addBatch_Results) SetStatus(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Mix_addBatch_Results_List is a list of Mix_addBatch_Results.
type Mix_addBatch_Results_List struct{ capnp.List }

// NewMix_addBatch_Results creates a new list of Mix_addBatch_Results.
func NewMix_addBatch_Results_List(s *capnp.Segment, sz int32) (Mix_addBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Mix_addBatch_Results_List{l}, err
}

func (s Mix_addBatch_Results_List) At(i int) Mix_addBatch_Results {
	return Mix_addBatch_Results{s.List.Struct(i)}
}

func (s Mix_addBatch_Results_List) Set(i int, v Mix_addBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_addBatch_Results_List) String() string {
	str, _ := text.MarshalList(0x873cb130ee0d5c36, s.List)
	return str
}

// Mix_addBatch_Results_Promise is a wrapper for a Mix_addBatch_Results promised by a client call.
type Mix_addBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_addBatch_Results_Promise) Struct() (Mix_addBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_addBatch_Results{s}, err
}

const schema_a1ac1f9011521afa = "x\xda\x94\x94OH\x14o\x18\xc7\x9f\xe7}g\x9d\xdf" +
	"\x0f\xdau\xc7\xe9$\xc5R\xe8!!3\xa3\x08\xadV" +
	"\x14\x0f\x0a\x1b;K\x10\x85\x87\xc6\xddi\x1dpg\xcc" +
	"\xf7\xb5\xd6K\x86\x10\xd1M\x84.\x1d\x82\x02\xebP\x1e" +
	"\x84\xa8(\x12\x0c\"\x8a\xba%Q\x9d\x82\xa2C`\xff" +
	"\xb0\xa0\x88\x89\xf7\x1d\xe7\x8f\x9bQ\xdd\x9e\x85\xef~\x9e" +
	"\xe7\xfb}\xdeg\xda\xaa\xd8E\xb6'\x9e)\x00\xc6\xee" +
	"D\x9d\xb7k \xb9\xd46\xb7\xe7\x0c\x18\x0d\x88\x00\x8a" +
	"\x0a\xb0\xc3 \x8d\x08\xa8\x1f\"Y@\xefD\xef\xe4\xc4" +
	"xfx\x1a\xb4\x06\x04H\xa0\x10\x8c\x93\x82\x10\x9c\x96" +
	"\x82\xcb\x87'\x97\xfe\xb7\xce\x9e\x03#\x85\xe8}k," +
	"hS\x99k\x17%I\x9f!/\xf49\"\xaaY\xa9" +
	"}\xd9\xaf\\\xffz\xf5\xf3\x8c\x0f\x93\xcd\x16I?\x82" +
	"\xe2\xcdN\xed{\xeb\\X\xbe\x02Z*\x06\x91\xed\xf4" +
	"\x05rI\x7f()\xf7%\x85=\xaa\x1fxr\xf3\xf1" +
	"\x8d\xf8\xcc\xcb\xa4]\x8c\xf4C\x0a\x12\xd6\xa7\xf9/\x0b" +
	"Oo\xc5g\xdeH\x1b\x84\xa0\x99\x0a\x81s\xe4\xe4\xc1" +
	"\xc5\xe6\xef\xaf\xd7\xea\xd6Ko\xeb9*\xaa>\xa9\xcd" +
	"\x17\xeev\xa6\xef\xdc{\x03Z\x8aFZ@\xdd\xa6\xd3" +
	"\xfa1)\xac\xd0\x07\xfaGQy\xef\x06:\xe7\x95\xf7" +
	"\xa7>\xc4;?\xa7-\xa2\xf3+\x9a\x85\xad\xde\xe8H" +
	"q[\xc5\xae\xb6\xd2\xa29\xe2\x8ct\xe4\xecj\xabY" +
	"*u\x9b\xbc8\xd4T\xb0\xd8\xd80\xe5\xccP\xa8\x02" +
	"\xa0 \x80\x96\xec\x000\xfe\xa3h\xac'\x98e\xdc\xe4" +
	"c\x0c\xeb\x80`\x1d`\x88R\"T\xd9\xe29\xbb\xea" +
	"X\xbc\xc7u\x8e\xdae\x9f\xc8q\x15\xb1%\"\xd6W" +
	",nb:Z! \xa6cd\x12\x92W\x90\xd4." +
	"\xe7\x11\xe3\xb4\xf3\x00F\x9a\xa2\xb1\x81\xa0\xc7\xac\xa2\xeb" +
	"\x94\xd8\x01t\xf7[U^p\xc7\xa8SB\x15\x08\xaa" +
	"\x7f7m\xde\x1c5+\x0c \xd4\xa2\xaf\xed6U^" +
	"\x1c\xaai\x1c\xd8h\x126X\x99a\x0a0O\x11\x93" +
	"@D\xf9\x9b\xa0{\\\xe7\xb8\x9bc\"\x99\x8c\x88\xe6" +
	"_\xb3^kmr\xec\xd5\x19\xb7G\xa4\xcc\xa0\x10a" +
	":z\xe15!\xaf\x98\xecq\xb3\xfeh5>\xbb#" +
	"\xd4D\xd1u\xb8\xe5p\xe91\xf9+\"gcU\xfc" +
	"{\x1dM\x00\x84\xb7\x86\xc1\x05k\xc6$\x10\xadOE" +
	"\x0c\x9f)\x06\xa7\xa4\xed\x1d\x04\xa2\xedT\x91\x84\xc7\x83" +
	"\xc1\xa7A\xdb\xd2\x0fD\xdb\xa4z\xc1\xbepea\xd0" +
	"\x85^\x90)\xa89V\xf6\x7f\xcbT\x00\xa0\x0b\xf3\xf8" +
	"\xc7=\xe4\xcdz\xb1\xf4\xb8\xe3\xcd\x91c\xb5\xc2\xca\x98" +
	"\x8e\xce\xd5\x8f\xeeg\x00\x00\x00\xff\xff\xad&L1"

func init() {
	schemas.Register(schema_a1ac1f9011521afa,
		0x873cb130ee0d5c36,
		0x926c1f797f824577,
		0x95896509ee825aa6,
		0xa5f3abf7b4044adb,
		0xa7f59e6ee73e90ad,
		0xb6ccb7cd5c0fca73,
		0xb8d4c1f6bef26505,
		0xe4fb25d5577e606e,
		0xe5c2bb103bbd5250,
		0xf080ef04be3b5ceb)
}
