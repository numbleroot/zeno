// Code generated by capnpc-go. DO NOT EDIT.

package messages

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xd1399dfcfea72681

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xd1399dfcfea72681, s.Struct)
	return str
}

func (s Batch) Comment() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Batch) HasComment() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) CommentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Batch) SetComment(v string) error {
	return s.Struct.SetText(0, v)
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xd1399dfcfea72681, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

type Mix struct{ Client capnp.Client }

// Mix_TypeID is the unique identifier for the type Mix.
const Mix_TypeID = 0xf79eac848bc341eb

func (c Mix) AcceptBatch(ctx context.Context, params func(Mix_acceptBatch_Params) error, opts ...capnp.CallOption) Mix_acceptBatch_Results_Promise {
	if c.Client == nil {
		return Mix_acceptBatch_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf79eac848bc341eb,
			MethodID:      0,
			InterfaceName: "messages/batch.capnp:Mix",
			MethodName:    "acceptBatch",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Mix_acceptBatch_Params{Struct: s}) }
	}
	return Mix_acceptBatch_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Mix_Server interface {
	AcceptBatch(Mix_acceptBatch) error
}

func Mix_ServerToClient(s Mix_Server) Mix {
	c, _ := s.(server.Closer)
	return Mix{Client: server.New(Mix_Methods(nil, s), c)}
}

func Mix_Methods(methods []server.Method, s Mix_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf79eac848bc341eb,
			MethodID:      0,
			InterfaceName: "messages/batch.capnp:Mix",
			MethodName:    "acceptBatch",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Mix_acceptBatch{c, opts, Mix_acceptBatch_Params{Struct: p}, Mix_acceptBatch_Results{Struct: r}}
			return s.AcceptBatch(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Mix_acceptBatch holds the arguments for a server call to Mix.acceptBatch.
type Mix_acceptBatch struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Mix_acceptBatch_Params
	Results Mix_acceptBatch_Results
}

type Mix_acceptBatch_Params struct{ capnp.Struct }

// Mix_acceptBatch_Params_TypeID is the unique identifier for the type Mix_acceptBatch_Params.
const Mix_acceptBatch_Params_TypeID = 0x8c4cf957b17469bd

func NewMix_acceptBatch_Params(s *capnp.Segment) (Mix_acceptBatch_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_acceptBatch_Params{st}, err
}

func NewRootMix_acceptBatch_Params(s *capnp.Segment) (Mix_acceptBatch_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_acceptBatch_Params{st}, err
}

func ReadRootMix_acceptBatch_Params(msg *capnp.Message) (Mix_acceptBatch_Params, error) {
	root, err := msg.RootPtr()
	return Mix_acceptBatch_Params{root.Struct()}, err
}

func (s Mix_acceptBatch_Params) String() string {
	str, _ := text.Marshal(0x8c4cf957b17469bd, s.Struct)
	return str
}

func (s Mix_acceptBatch_Params) Batch() (Batch, error) {
	p, err := s.Struct.Ptr(0)
	return Batch{Struct: p.Struct()}, err
}

func (s Mix_acceptBatch_Params) HasBatch() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_acceptBatch_Params) SetBatch(v Batch) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBatch sets the batch field to a newly
// allocated Batch struct, preferring placement in s's segment.
func (s Mix_acceptBatch_Params) NewBatch() (Batch, error) {
	ss, err := NewBatch(s.Struct.Segment())
	if err != nil {
		return Batch{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Mix_acceptBatch_Params_List is a list of Mix_acceptBatch_Params.
type Mix_acceptBatch_Params_List struct{ capnp.List }

// NewMix_acceptBatch_Params creates a new list of Mix_acceptBatch_Params.
func NewMix_acceptBatch_Params_List(s *capnp.Segment, sz int32) (Mix_acceptBatch_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_acceptBatch_Params_List{l}, err
}

func (s Mix_acceptBatch_Params_List) At(i int) Mix_acceptBatch_Params {
	return Mix_acceptBatch_Params{s.List.Struct(i)}
}

func (s Mix_acceptBatch_Params_List) Set(i int, v Mix_acceptBatch_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_acceptBatch_Params_List) String() string {
	str, _ := text.MarshalList(0x8c4cf957b17469bd, s.List)
	return str
}

// Mix_acceptBatch_Params_Promise is a wrapper for a Mix_acceptBatch_Params promised by a client call.
type Mix_acceptBatch_Params_Promise struct{ *capnp.Pipeline }

func (p Mix_acceptBatch_Params_Promise) Struct() (Mix_acceptBatch_Params, error) {
	s, err := p.Pipeline.Struct()
	return Mix_acceptBatch_Params{s}, err
}

func (p Mix_acceptBatch_Params_Promise) Batch() Batch_Promise {
	return Batch_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Mix_acceptBatch_Results struct{ capnp.Struct }

// Mix_acceptBatch_Results_TypeID is the unique identifier for the type Mix_acceptBatch_Results.
const Mix_acceptBatch_Results_TypeID = 0xd2f464a21852d2ee

func NewMix_acceptBatch_Results(s *capnp.Segment) (Mix_acceptBatch_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_acceptBatch_Results{st}, err
}

func NewRootMix_acceptBatch_Results(s *capnp.Segment) (Mix_acceptBatch_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mix_acceptBatch_Results{st}, err
}

func ReadRootMix_acceptBatch_Results(msg *capnp.Message) (Mix_acceptBatch_Results, error) {
	root, err := msg.RootPtr()
	return Mix_acceptBatch_Results{root.Struct()}, err
}

func (s Mix_acceptBatch_Results) String() string {
	str, _ := text.Marshal(0xd2f464a21852d2ee, s.Struct)
	return str
}

func (s Mix_acceptBatch_Results) Ack() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Mix_acceptBatch_Results) HasAck() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mix_acceptBatch_Results) AckBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Mix_acceptBatch_Results) SetAck(v string) error {
	return s.Struct.SetText(0, v)
}

// Mix_acceptBatch_Results_List is a list of Mix_acceptBatch_Results.
type Mix_acceptBatch_Results_List struct{ capnp.List }

// NewMix_acceptBatch_Results creates a new list of Mix_acceptBatch_Results.
func NewMix_acceptBatch_Results_List(s *capnp.Segment, sz int32) (Mix_acceptBatch_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mix_acceptBatch_Results_List{l}, err
}

func (s Mix_acceptBatch_Results_List) At(i int) Mix_acceptBatch_Results {
	return Mix_acceptBatch_Results{s.List.Struct(i)}
}

func (s Mix_acceptBatch_Results_List) Set(i int, v Mix_acceptBatch_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Mix_acceptBatch_Results_List) String() string {
	str, _ := text.MarshalList(0xd2f464a21852d2ee, s.List)
	return str
}

// Mix_acceptBatch_Results_Promise is a wrapper for a Mix_acceptBatch_Results promised by a client call.
type Mix_acceptBatch_Results_Promise struct{ *capnp.Pipeline }

func (p Mix_acceptBatch_Results_Promise) Struct() (Mix_acceptBatch_Results, error) {
	s, err := p.Pipeline.Struct()
	return Mix_acceptBatch_Results{s}, err
}

const schema_f30bb9d3ef541f29 = "x\xda\x12X\xef\xc0d\xc8z\x9c\x89\x81!P\x81\x95" +
	"\xed\xff\xde\xcc\x92\x8d\xe1?}z\x18\x04%\x19\x19\x18" +
	"X\x19\xd9\x19\x18\x8c=\x19\x93\x18\x19\x18\x85C\x19\xed" +
	"\x19\x18\xff7\xaa-\xff\xf7g\xae\xe5E\x06AQ\xc6" +
	"\xff\x9a\xf2!\xef/\xef\xe4\xfe\x0cQ(\\\xcaxK" +
	"\xb8\x11\xcc\xaa\x05\xab}w)HbQ\xca\x97K\xc8" +
	"\x86\xcde\xcc\x02\x19\xb6\x12\xac\xe0\xb5\xe3\xe1\xee\x965" +
	"\xf3\xbe3\x08\x8a2#\x0cc`\x14>\xc9xJ\xf8" +
	"*\xd8\xa4\x8b\x8c\xee\xc2\x7f\x19\xd9\x19t\xfe\xe7\xa6\x16" +
	"\x17'\xa6\xa7\x16\xb3\xe8'%\x96$g\xe8%'\x16" +
	"\xe4\x15X\xf9fV\xe8%&'\xa7\x16\x948\x81D" +
	"U\x02\x12\x8b\xd8\x13s\x8b\x03Y\x98Y\x18\x18X\x18" +
	"\x19\x18\x04y\x8d\x18\x18\x029\x98\x19\x03E\x98\x18\xe5" +
	"\xc1Z\x19\x05\x10\xde``d\x14``\x84\x1b\xce\x84" +
	"b\xb8Sb\x09srF\x00##\xb2qN\x08\xe3" +
	"\xea\x93\xf3ssS\xf3J\x18y\x18\x98\x18y\x90\x8c" +
	"\xc1\xef\xc6\xa0\xd4b\xfe\xd2\x9c\x12\x14G*!Le" +
	"OL\xce\xc60\x91\x09\xddD\x06\x06\x88\xbbX\x19\x18" +
	"\xe0\xb1\xc6\x08\x0bqA\xc1$\x06&AN\xf6\xff0" +
	"k\x19\xd8K\x923\x1c\x18\x03\x18\x19\x01\x01\x00\x00\xff" +
	"\xff:\xbc\x8cK"

func init() {
	schemas.Register(schema_f30bb9d3ef541f29,
		0x8c4cf957b17469bd,
		0xd1399dfcfea72681,
		0xd2f464a21852d2ee,
		0xf79eac848bc341eb)
}
