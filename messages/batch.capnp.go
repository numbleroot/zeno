// Code generated by capnpc-go. DO NOT EDIT.

package messages

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Batch struct{ capnp.Struct }

// Batch_TypeID is the unique identifier for the type Batch.
const Batch_TypeID = 0xd1399dfcfea72681

func NewBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func NewRootBatch(s *capnp.Segment) (Batch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Batch{st}, err
}

func ReadRootBatch(msg *capnp.Message) (Batch, error) {
	root, err := msg.RootPtr()
	return Batch{root.Struct()}, err
}

func (s Batch) String() string {
	str, _ := text.Marshal(0xd1399dfcfea72681, s.Struct)
	return str
}

func (s Batch) Comment() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Batch) HasComment() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Batch) CommentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Batch) SetComment(v string) error {
	return s.Struct.SetText(0, v)
}

// Batch_List is a list of Batch.
type Batch_List struct{ capnp.List }

// NewBatch creates a new list of Batch.
func NewBatch_List(s *capnp.Segment, sz int32) (Batch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Batch_List{l}, err
}

func (s Batch_List) At(i int) Batch { return Batch{s.List.Struct(i)} }

func (s Batch_List) Set(i int, v Batch) error { return s.List.SetStruct(i, v.Struct) }

func (s Batch_List) String() string {
	str, _ := text.MarshalList(0xd1399dfcfea72681, s.List)
	return str
}

// Batch_Promise is a wrapper for a Batch promised by a client call.
type Batch_Promise struct{ *capnp.Pipeline }

func (p Batch_Promise) Struct() (Batch, error) {
	s, err := p.Pipeline.Struct()
	return Batch{s}, err
}

const schema_f30bb9d3ef541f29 = "x\xda\x12\x08p`2d\xdd\xcf\xc8\xc0\x10(\xc2\xca" +
	"\xf6\xbfQm\xf9\xbf?s-/2\x08\x8a2\xfe\xd7" +
	"\x94\x0fy\x7fy'\xf7g\x06VFv\x06\x06\xc1\xa3" +
	"\xb7\x04/\x82\xe8\xb3\xf6\x0c\xba\xffsS\x8b\x8b\x13\xd3" +
	"S\x8b\x99\xf4\x93\x12K\x923\xf4\x92\x13\x0b\xf2\x0a\xac" +
	"\x9c\x12K\x98\x933\x02\x18\x19\x03Y\x98Y\x18\x18X" +
	"\x18\x19\x18\x04y\x9d\x18\x18\x029\x98\x19\x03E\x98\x18" +
	"\xeb\x93\xf3ssS\xf3J\x18y\x18\x98\x18y\x18\x18" +
	"\x01\x01\x00\x00\xff\xff~\x9b!r"

func init() {
	schemas.Register(schema_f30bb9d3ef541f29,
		0xd1399dfcfea72681)
}
